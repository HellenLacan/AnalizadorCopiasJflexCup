/****************************************  1ra Area: Codigo de Usuario *******************************************/
//-------> importaciones, paquetes
package Analizadores;
import java_cup.runtime.Symbol;

/**********************************  Codigo para el parser, variables, metodos **********************************/

parser code
{:
    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }
:}

/************************************* Codigo para las acciones gramaticales *********************************/
action code
{::}

/*************************************  2da Area: Declaraciones **************************************/
//------> declaracion de terminales 
terminal iimport, claass, voiid,
         iint, bool, string, chaar, doublee, object,
         iff, elsee, foor, whilee, doo, swiitch,
         priivate, puublic, prootected, fiinal, staatic,
         pto, ptoYcoma,coma, llavea, llavec, para, parc,
         mayor, menor, asignacion, mayorQ, menorQ, distinto, iguala,
         mas, menos, por, div, mod,
         and, or,not,
         num, id,decimal, cadena;

//------> declaracion de no terminales
non terminal  INICIO,E,
              PRINCIPALES, IMPORT, IMPORTS1, CONSTRUCTOR,
              CLASS, CUERPO_CLASE, DECLARACIONES_CLASE, VISIBILIDAD, METODOS, PARAMETROS, TIPODATOS, 
              FUNCIONES, MET_FUNC, CUERPO_FUNCIONES,
              VARIABLES, ASIGNACION_VAR,
              IF, IF_ELSE,
              CONDICION, EXPR, MULT, VALOR, WHILE, DO_WHILE, LLAMADA_FUNCIONES, PARAMETROS_FUNC;


//----> precedencia de menor a mayor 
precedence left mas, menos;
precedence left por, div, and, or, not;
precedence left mayor, menor;
precedence left mayorQ, menorQ;

start with INICIO;

/*************************************  23a area: Reglas Semanticas **************************************/

INICIO::=PRINCIPALES:a {: :};

PRINCIPALES::=  PRINCIPALES IMPORT
               |PRINCIPALES CLASS
               |IMPORT
               |CLASS
;

IMPORT::= iimport IMPORTS1 ptoYcoma
;

IMPORTS1::= IMPORTS1 pto id
           |IMPORTS1 pto por
           |id
;

CLASS::= VISIBILIDAD claass id CUERPO_CLASE id 
         |claass id CUERPO_CLASE id 
;

CUERPO_CLASE::= llavea DECLARACIONES_CLASE llavec
               |llavea llavec
;

DECLARACIONES_CLASE::= DECLARACIONES_CLASE VISIBILIDAD MET_FUNC
                      |DECLARACIONES_CLASE MET_FUNC
                      |DECLARACIONES_CLASE VISIBILIDAD TIPODATOS VARIABLES ptoYcoma
                      |DECLARACIONES_CLASE TIPODATOS VARIABLES ptoYcoma
                      |DECLARACIONES_CLASE VISIBILIDAD CONSTRUCTOR
                      |DECLARACIONES_CLASE CONSTRUCTOR
                      |VISIBILIDAD MET_FUNC
                      |MET_FUNC     
                      |VISIBILIDAD TIPODATOS VARIABLES ptoYcoma   
                      |TIPODATOS VARIABLES ptoYcoma  
                      |VISIBILIDAD CONSTRUCTOR
                      |CONSTRUCTOR                     
;

MET_FUNC::= voiid id para parc llavea llavec                                         //Reconoce metodo void sin cuerpo sin parametros
           |voiid id para parc llavea CUERPO_FUNCIONES llavec                        //Reconoce metodo void con cuerpo sin parametros
           |voiid id para PARAMETROS parc llavea llavec                              //Reconoce metodo void sin cuerpo con parametros
           |voiid id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec             //Reconoce metodo void con cuerpo con parametros
           |TIPODATOS id para parc llavea llavec                                     //Reconoce Funcion sin cuerpo sin parametros
           |TIPODATOS id para parc llavea CUERPO_FUNCIONES llavec                    //Reconoce Funcion con cuerpo sin parametros
           |TIPODATOS id para PARAMETROS parc llavea llavec                          //Reconoce Funcion sin cuerpo con parametros
           |TIPODATOS id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec         //Reconoce Funcion con cuerpo con parametros
;

CUERPO_FUNCIONES::= CUERPO_FUNCIONES VISIBILIDAD TIPODATOS VARIABLES ptoYcoma        //Reconoce varias variables con visibilidad
                   |CUERPO_FUNCIONES TIPODATOS VARIABLES ptoYcoma                    //Reconoce varias variables sin visibilidad
                   |CUERPO_FUNCIONES VARIABLES ptoYcoma                              //Reconoce varias asignacion de variables\
                   |CUERPO_FUNCIONES iff para CONDICION  parc llavea llavec
                   |CUERPO_FUNCIONES iff para CONDICION parc llavea CUERPO_FUNCIONES llavec
                   |CUERPO_FUNCIONES WHILE
                   |CUERPO_FUNCIONES DO_WHILE
                   |CUERPO_FUNCIONES LLAMADA_FUNCIONES
                   |VISIBILIDAD TIPODATOS VARIABLES ptoYcoma                         //Reconoce una variable con visibilidad  
                   |TIPODATOS VARIABLES ptoYcoma                                     //Reconoce una variable sin visibilidad
                   |VARIABLES ptoYcoma                                               //Reconoce una asignacion de variables
                   |iff para CONDICION parc llavea llavec
                   |iff para CONDICION parc llavea CUERPO_FUNCIONES llavec
                   |WHILE
                   |DO_WHILE
                   |LLAMADA_FUNCIONES
;

LLAMADA_FUNCIONES::= id para parc ptoYcoma
                    |id para PARAMETROS_FUNC parc ptoYcoma
;

PARAMETROS_FUNC::= PARAMETROS_FUNC coma id
                   |id
;

CONSTRUCTOR::= id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec
              |id para PARAMETROS parc llavea llavec
              |id para parc llavea CUERPO_FUNCIONES llavec
              |id para parc llavea llavec
;

VARIABLES::= VARIABLES coma id 
            |VARIABLES coma id ASIGNACION_VAR
            |id 
            |id ASIGNACION_VAR
;

WHILE::= whilee para CONDICION parc llavea CUERPO_FUNCIONES llavec
         |whilee para CONDICION parc llavea llavec

;

DO_WHILE::= doo llavea CUERPO_FUNCIONES llavec whilee para CONDICION parc ptoYcoma
           |doo llavea llavec whilee para CONDICION parc ptoYcoma
;

ASIGNACION_VAR::= asignacion EXPR
;

PARAMETROS::= PARAMETROS coma TIPODATOS id
             |TIPODATOS id
;

VISIBILIDAD::= priivate
              |puublic
              |prootected
              |fiinal
              |staatic
;

TIPODATOS::= iint
            |bool
            |string 
            |chaar 
            |doublee 
            |object
;

EXPR::= EXPR mas EXPR
       |EXPR menos EXPR
       |EXPR por EXPR
       |EXPR div EXPR
       |menos EXPR
       |num:e 
       |id:id 
       |cadena
       |decimal
       |para EXPR:e parc
;

CONDICION::= EXPR mayor EXPR
            |EXPR menor EXPR
            |EXPR mayorQ EXPR
            |EXPR menorQ EXPR
            |EXPR iguala EXPR
            |EXPR distinto EXPR
            |EXPR asignacion EXPR
            |EXPR mod EXPR
            |not CONDICION
            |CONDICION and CONDICION
            |CONDICION or CONDICION
            |para CONDICION parc
;