
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\042\003\000\002\042\003" +
    "\000\002\005\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\011\007\000\002\011\006\000\002" +
    "\012\005\000\002\012\004\000\002\013\004\000\002\013" +
    "\003\000\002\041\004\000\002\041\003\000\002\041\006" +
    "\000\002\041\005\000\002\041\004\000\002\041\003\000" +
    "\002\021\010\000\002\021\011\000\002\021\011\000\002" +
    "\021\012\000\002\021\010\000\002\021\011\000\002\021" +
    "\011\000\002\021\012\000\002\022\004\000\002\022\003" +
    "\000\002\040\006\000\002\040\005\000\002\040\004\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\047" +
    "\012\000\002\047\011\000\002\010\003\000\002\010\003" +
    "\000\002\050\004\000\002\050\003\000\002\051\006\000" +
    "\002\051\010\000\002\051\005\000\002\051\007\000\002" +
    "\054\005\000\002\054\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\052\005\000\002\052\007" +
    "\000\002\052\004\000\002\052\006\000\002\025\010\000" +
    "\002\025\011\000\002\043\020\000\002\043\017\000\002" +
    "\044\003\000\002\044\003\000\002\045\005\000\002\045" +
    "\005\000\002\045\004\000\002\045\006\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\035\006\000\002\035\007\000\002\036\005\000\002" +
    "\036\003\000\002\007\011\000\002\007\010\000\002\007" +
    "\010\000\002\007\007\000\002\023\005\000\002\023\006" +
    "\000\002\023\003\000\002\023\004\000\002\033\011\000" +
    "\002\033\010\000\002\034\013\000\002\034\012\000\002" +
    "\024\004\000\002\016\006\000\002\016\004\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\004\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\004" +
    "\000\002\027\005\000\002\027\005\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\020\004\016\005\015\025\011\026\012\027" +
    "\010\030\006\031\014\001\002\000\004\005\u0110\001\002" +
    "\000\022\002\000\004\016\005\015\025\011\026\012\027" +
    "\010\030\006\031\014\001\002\000\024\005\uffa1\006\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\066" +
    "\uffa1\001\002\000\004\002\u010e\001\002\000\024\005\uffa2" +
    "\006\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\066\uffa2\001\002\000\024\005\uffa4\006\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\066\uffa4\001" +
    "\002\000\024\005\uffa3\006\uffa3\011\uffa3\012\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\016\uffa3\066\uffa3\001\002\000\022\002" +
    "\ufffe\004\ufffe\005\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\001\002\000\024\005\uffa0\006\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\066\uffa0\001\002" +
    "\000\004\066\027\001\002\000\004\066\021\001\002\000" +
    "\022\002\ufffd\004\ufffd\005\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\001\002\000\022\002\ufffc\004\ufffc\005" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\001\002" +
    "\000\006\032\ufff8\033\ufff8\001\002\000\006\032\024\033" +
    "\023\001\002\000\022\002\ufffb\004\ufffb\005\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\001\002\000\006\052" +
    "\025\066\026\001\002\000\006\032\ufff9\033\ufff9\001\002" +
    "\000\006\032\ufffa\033\ufffa\001\002\000\004\035\030\001" +
    "\002\000\036\006\034\011\045\012\040\013\033\014\046" +
    "\015\037\016\050\025\011\026\012\027\010\030\006\031" +
    "\014\036\047\066\044\001\002\000\004\066\032\001\002" +
    "\000\022\002\ufff6\004\ufff6\005\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\001\002\000\004\066\uff9d\001\002" +
    "\000\004\066\u0101\001\002\000\036\006\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\036\ufff2\066\ufff2\001\002\000" +
    "\036\006\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\036" +
    "\ufff0\066\ufff0\001\002\000\004\066\uff9b\001\002\000\004" +
    "\066\uff9e\001\002\000\004\066\361\001\002\000\022\006" +
    "\034\011\045\012\040\013\033\014\046\015\037\016\050" +
    "\066\044\001\002\000\036\006\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\036\uffec\066\uffec\001\002\000\004\037" +
    "\054\001\002\000\004\066\uff9f\001\002\000\004\066\uff9c" +
    "\001\002\000\004\066\ufff4\001\002\000\004\066\uff9a\001" +
    "\002\000\036\006\034\011\045\012\040\013\033\014\046" +
    "\015\037\016\050\025\011\026\012\027\010\030\006\031" +
    "\014\036\053\066\044\001\002\000\036\006\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\036\ufff3\066\ufff3\001\002" +
    "\000\004\066\ufff5\001\002\000\020\011\045\012\040\013" +
    "\033\014\046\015\037\016\050\040\056\001\002\000\004" +
    "\066\354\001\002\000\004\035\350\001\002\000\006\034" +
    "\060\040\061\001\002\000\016\011\045\012\040\013\033" +
    "\014\046\015\037\016\050\001\002\000\004\035\062\001" +
    "\002\000\046\011\045\012\040\013\033\014\046\015\037" +
    "\016\050\017\077\021\104\022\070\023\100\024\065\025" +
    "\011\026\012\027\010\030\006\031\014\036\102\066\076" +
    "\001\002\000\054\007\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\036" +
    "\uffdb\062\uffdb\064\uffdb\066\uffdb\001\002\000\054\007\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\036\uffdd\062\uffdd\064\uffdd\066" +
    "\uffdd\001\002\000\004\037\301\001\002\000\054\007\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\036\uffd9\062\uffd9\064\uffd9\066" +
    "\uffd9\001\002\000\054\007\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\036\uffde\062\uffde\064\uffde\066\uffde\001\002\000\004\037" +
    "\272\001\002\000\054\007\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\036\uffe2\062\uffe2\064\uffe2\066\uffe2\001\002\000\004\066" +
    "\262\001\002\000\006\033\267\034\264\001\002\000\016" +
    "\011\045\012\040\013\033\014\046\015\037\016\050\001" +
    "\002\000\054\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\036\uffdc" +
    "\062\uffdc\064\uffdc\066\uffdc\001\002\000\012\033\uffad\034" +
    "\uffad\037\244\043\246\001\002\000\004\037\235\001\002" +
    "\000\004\035\217\001\002\000\054\007\uffda\011\uffda\012" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\036\uffda\062\uffda\064\uffda\066\uffda\001\002" +
    "\000\036\006\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\016\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\036\uffb2\066\uffb2\001\002\000\046\011\045\012\040\013" +
    "\033\014\046\015\037\016\050\017\077\021\104\022\070" +
    "\023\100\024\065\025\011\026\012\027\010\030\006\031" +
    "\014\036\216\066\076\001\002\000\004\037\105\001\002" +
    "\000\016\011\045\012\040\013\033\014\046\015\037\016" +
    "\050\001\002\000\004\066\107\001\002\000\004\043\110" +
    "\001\002\000\016\037\111\051\116\065\115\066\117\067" +
    "\112\070\113\001\002\000\016\037\111\051\116\065\115" +
    "\066\117\067\112\070\113\001\002\000\044\033\uff91\034" +
    "\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054" +
    "\uff91\057\uff91\060\uff91\001\002\000\044\033\uff92\034\uff92" +
    "\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046" +
    "\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92" +
    "\057\uff92\060\uff92\001\002\000\014\033\131\050\122\051" +
    "\123\052\121\053\124\001\002\000\044\033\uff94\034\uff94" +
    "\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046" +
    "\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94" +
    "\057\uff94\060\uff94\001\002\000\016\037\111\051\116\065" +
    "\115\066\117\067\112\070\113\001\002\000\044\033\uff93" +
    "\034\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93" +
    "\054\uff93\057\uff93\060\uff93\001\002\000\044\033\uff95\034" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\052\121\053\124\054" +
    "\uff95\057\uff95\060\uff95\001\002\000\016\037\111\051\116" +
    "\065\115\066\117\067\112\070\113\001\002\000\016\037" +
    "\111\051\116\065\115\066\117\067\112\070\113\001\002" +
    "\000\016\037\111\051\116\065\115\066\117\067\112\070" +
    "\113\001\002\000\016\037\111\051\116\065\115\066\117" +
    "\067\112\070\113\001\002\000\044\033\uff96\034\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\057" +
    "\uff96\060\uff96\001\002\000\044\033\uff98\034\uff98\040\uff98" +
    "\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047" +
    "\uff98\050\uff98\051\uff98\052\121\053\124\054\uff98\057\uff98" +
    "\060\uff98\001\002\000\044\033\uff99\034\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\121\053\124\054\uff99\057\uff99\060" +
    "\uff99\001\002\000\044\033\uff97\034\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\057\uff97\060\uff97" +
    "\001\002\000\020\037\135\051\116\061\132\065\115\066" +
    "\117\067\112\070\113\001\002\000\020\037\135\051\116" +
    "\061\132\065\115\066\117\067\112\070\113\001\002\000" +
    "\032\041\155\042\147\043\150\044\146\045\154\046\151" +
    "\047\145\050\122\051\123\052\121\053\124\054\152\001" +
    "\002\000\010\033\166\057\140\060\141\001\002\000\020" +
    "\037\135\051\116\061\132\065\115\066\117\067\112\070" +
    "\113\001\002\000\034\040\153\041\155\042\147\043\150" +
    "\044\146\045\154\046\151\047\145\050\122\051\123\052" +
    "\121\053\124\054\152\001\002\000\010\040\142\057\140" +
    "\060\141\001\002\000\020\037\135\051\116\061\132\065" +
    "\115\066\117\067\112\070\113\001\002\000\020\037\135" +
    "\051\116\061\132\065\115\066\117\067\112\070\113\001" +
    "\002\000\012\033\uff84\040\uff84\057\uff84\060\uff84\001\002" +
    "\000\012\033\uff85\040\uff85\057\uff85\060\uff85\001\002\000" +
    "\012\033\uff86\040\uff86\057\uff86\060\uff86\001\002\000\016" +
    "\037\111\051\116\065\115\066\117\067\112\070\113\001" +
    "\002\000\016\037\111\051\116\065\115\066\117\067\112" +
    "\070\113\001\002\000\016\037\111\051\116\065\115\066" +
    "\117\067\112\070\113\001\002\000\016\037\111\051\116" +
    "\065\115\066\117\067\112\070\113\001\002\000\016\037" +
    "\111\051\116\065\115\066\117\067\112\070\113\001\002" +
    "\000\016\037\111\051\116\065\115\066\117\067\112\070" +
    "\113\001\002\000\044\033\uff90\034\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\057\uff90\060\uff90" +
    "\001\002\000\016\037\111\051\116\065\115\066\117\067" +
    "\112\070\113\001\002\000\016\037\111\051\116\065\115" +
    "\066\117\067\112\070\113\001\002\000\022\033\uff8f\040" +
    "\uff8f\050\122\051\123\052\121\053\124\057\uff8f\060\uff8f" +
    "\001\002\000\022\033\uff8c\040\uff8c\050\122\051\123\052" +
    "\121\053\124\057\uff8c\060\uff8c\001\002\000\022\033\uff88" +
    "\040\uff88\050\122\051\123\052\121\053\124\057\uff88\060" +
    "\uff88\001\002\000\022\033\uff8a\040\uff8a\050\122\051\123" +
    "\052\121\053\124\057\uff8a\060\uff8a\001\002\000\022\033" +
    "\uff89\040\uff89\050\122\051\123\052\121\053\124\057\uff89" +
    "\060\uff89\001\002\000\022\033\uff8e\040\uff8e\050\122\051" +
    "\123\052\121\053\124\057\uff8e\060\uff8e\001\002\000\022" +
    "\033\uff8d\040\uff8d\050\122\051\123\052\121\053\124\057" +
    "\uff8d\060\uff8d\001\002\000\022\033\uff8b\040\uff8b\050\122" +
    "\051\123\052\121\053\124\057\uff8b\060\uff8b\001\002\000" +
    "\004\066\170\001\002\000\004\040\206\001\002\000\020" +
    "\043\174\050\200\051\172\052\177\053\171\055\175\056" +
    "\176\001\002\000\004\043\uffb8\001\002\000\004\043\uffba" +
    "\001\002\000\004\043\204\001\002\000\022\037\111\051" +
    "\116\055\175\056\176\065\115\066\117\067\112\070\113" +
    "\001\002\000\004\040\uffc1\001\002\000\004\040\uffc0\001" +
    "\002\000\004\043\uffb9\001\002\000\004\043\uffbb\001\002" +
    "\000\004\040\uffbd\001\002\000\014\040\uffbe\050\122\051" +
    "\123\052\121\053\124\001\002\000\004\040\uffbf\001\002" +
    "\000\016\037\111\051\116\065\115\066\117\067\112\070" +
    "\113\001\002\000\014\040\uffbc\050\122\051\123\052\121" +
    "\053\124\001\002\000\004\035\207\001\002\000\046\011" +
    "\045\012\040\013\033\014\046\015\037\016\050\017\077" +
    "\021\104\022\070\023\100\024\065\025\011\026\012\027" +
    "\010\030\006\031\014\036\210\066\076\001\002\000\054" +
    "\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\036\uffc2\062\uffc2\064" +
    "\uffc2\066\uffc2\001\002\000\046\011\045\012\040\013\033" +
    "\014\046\015\037\016\050\017\077\021\104\022\070\023" +
    "\100\024\065\025\011\026\012\027\010\030\006\031\014" +
    "\036\213\066\076\001\002\000\054\007\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\036\uffe3\062\uffe3\064\uffe3\066\uffe3\001\002" +
    "\000\054\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\036\uffc3\062" +
    "\uffc3\064\uffc3\066\uffc3\001\002\000\012\033\uff87\040\uff87" +
    "\057\uff87\060\uff87\001\002\000\014\040\153\050\122\051" +
    "\123\052\121\053\124\001\002\000\036\006\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\036\uffb3\066\uffb3\001\002" +
    "\000\046\011\045\012\040\013\033\014\046\015\037\016" +
    "\050\017\077\021\104\022\070\023\100\024\065\025\011" +
    "\026\012\027\010\030\006\031\014\036\220\066\076\001" +
    "\002\000\004\022\230\001\002\000\046\011\045\012\040" +
    "\013\033\014\046\015\037\016\050\017\077\021\104\022" +
    "\070\023\100\024\065\025\011\026\012\027\010\030\006" +
    "\031\014\036\222\066\076\001\002\000\004\022\223\001" +
    "\002\000\004\037\224\001\002\000\020\037\135\051\116" +
    "\061\132\065\115\066\117\067\112\070\113\001\002\000" +
    "\010\040\226\057\140\060\141\001\002\000\004\033\227" +
    "\001\002\000\054\007\uffa9\011\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\036" +
    "\uffa9\062\uffa9\064\uffa9\066\uffa9\001\002\000\004\037\231" +
    "\001\002\000\020\037\135\051\116\061\132\065\115\066" +
    "\117\067\112\070\113\001\002\000\010\040\233\057\140" +
    "\060\141\001\002\000\004\033\234\001\002\000\054\007" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\036\uffa8\062\uffa8\064\uffa8" +
    "\066\uffa8\001\002\000\020\037\135\051\116\061\132\065" +
    "\115\066\117\067\112\070\113\001\002\000\010\040\237" +
    "\057\140\060\141\001\002\000\004\035\240\001\002\000" +
    "\046\011\045\012\040\013\033\014\046\015\037\016\050" +
    "\017\077\021\104\022\070\023\100\024\065\025\011\026" +
    "\012\027\010\030\006\031\014\036\241\066\076\001\002" +
    "\000\054\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\036\uffc5\062" +
    "\uffc5\064\uffc5\066\uffc5\001\002\000\046\011\045\012\040" +
    "\013\033\014\046\015\037\016\050\017\077\021\104\022" +
    "\070\023\100\024\065\025\011\026\012\027\010\030\006" +
    "\031\014\036\243\066\076\001\002\000\054\007\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\036\uffc4\062\uffc4\064\uffc4\066\uffc4" +
    "\001\002\000\006\040\251\066\252\001\002\000\006\033" +
    "\uffac\034\uffac\001\002\000\016\037\111\051\116\065\115" +
    "\066\117\067\112\070\113\001\002\000\016\033\uffa7\034" +
    "\uffa7\050\122\051\123\052\121\053\124\001\002\000\006" +
    "\034\254\040\255\001\002\000\004\033\253\001\002\000" +
    "\006\034\uffb4\040\uffb4\001\002\000\054\007\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\036\uffb7\062\uffb7\064\uffb7\066\uffb7\001" +
    "\002\000\004\066\257\001\002\000\004\033\256\001\002" +
    "\000\054\007\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\036\uffb6\062" +
    "\uffb6\064\uffb6\066\uffb6\001\002\000\006\034\uffb5\040\uffb5" +
    "\001\002\000\004\066\262\001\002\000\006\033\263\034" +
    "\264\001\002\000\010\033\uffad\034\uffad\043\246\001\002" +
    "\000\054\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\036\uffe1\062" +
    "\uffe1\064\uffe1\066\uffe1\001\002\000\004\066\265\001\002" +
    "\000\010\033\uffaf\034\uffaf\043\246\001\002\000\006\033" +
    "\uffae\034\uffae\001\002\000\054\007\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\036\uffdf\062\uffdf\064\uffdf\066\uffdf\001\002\000" +
    "\006\033\271\034\264\001\002\000\054\007\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\036\uffe0\062\uffe0\064\uffe0\066\uffe0\001" +
    "\002\000\020\037\135\051\116\061\132\065\115\066\117" +
    "\067\112\070\113\001\002\000\010\040\274\057\140\060" +
    "\141\001\002\000\004\035\275\001\002\000\046\011\045" +
    "\012\040\013\033\014\046\015\037\016\050\017\077\021" +
    "\104\022\070\023\100\024\065\025\011\026\012\027\010" +
    "\030\006\031\014\036\276\066\076\001\002\000\054\007" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\036\uffaa\062\uffaa\064\uffaa" +
    "\066\uffaa\001\002\000\046\011\045\012\040\013\033\014" +
    "\046\015\037\016\050\017\077\021\104\022\070\023\100" +
    "\024\065\025\011\026\012\027\010\030\006\031\014\036" +
    "\300\066\076\001\002\000\054\007\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\036\uffab\062\uffab\064\uffab\066\uffab\001\002\000" +
    "\020\037\135\051\116\061\132\065\304\066\302\067\303" +
    "\070\113\001\002\000\034\040\uffcc\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\052\uff93\053\uff93\054\uff93\001\002\000\034\040\uffca\041" +
    "\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91" +
    "\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\001\002\000" +
    "\034\040\uffcb\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054" +
    "\uff94\001\002\000\004\040\uffd5\001\002\000\004\040\310" +
    "\001\002\000\010\040\uffd6\057\140\060\141\001\002\000" +
    "\004\035\311\001\002\000\004\062\314\001\002\000\010" +
    "\036\uffd3\062\uffd3\064\uffd3\001\002\000\010\036\334\062" +
    "\314\064\336\001\002\000\006\070\315\071\317\001\002" +
    "\000\004\063\uffcd\001\002\000\004\063\325\001\002\000" +
    "\010\065\322\066\323\067\320\001\002\000\004\071\uffca" +
    "\001\002\000\004\071\324\001\002\000\004\071\uffcb\001" +
    "\002\000\004\071\uffcc\001\002\000\004\063\uffce\001\002" +
    "\000\054\007\327\011\045\012\040\013\033\014\046\015" +
    "\037\016\050\017\077\021\104\022\070\023\100\024\065" +
    "\025\011\026\012\027\010\030\006\031\014\036\uffd0\062" +
    "\uffd0\064\uffd0\066\076\001\002\000\054\007\331\011\045" +
    "\012\040\013\033\014\046\015\037\016\050\017\077\021" +
    "\104\022\070\023\100\024\065\025\011\026\012\027\010" +
    "\030\006\031\014\036\uffd2\062\uffd2\064\uffd2\066\076\001" +
    "\002\000\004\033\330\001\002\000\010\036\uffcf\062\uffcf" +
    "\064\uffcf\001\002\000\004\033\332\001\002\000\010\036" +
    "\uffd1\062\uffd1\064\uffd1\001\002\000\004\036\345\001\002" +
    "\000\054\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\036\uffd7\062" +
    "\uffd7\064\uffd7\066\uffd7\001\002\000\010\036\uffd4\062\uffd4" +
    "\064\uffd4\001\002\000\004\063\337\001\002\000\050\007" +
    "\341\011\045\012\040\013\033\014\046\015\037\016\050" +
    "\017\077\021\104\022\070\023\100\024\065\025\011\026" +
    "\012\027\010\030\006\031\014\036\uffc7\066\076\001\002" +
    "\000\050\007\343\011\045\012\040\013\033\014\046\015" +
    "\037\016\050\017\077\021\104\022\070\023\100\024\065" +
    "\025\011\026\012\027\010\030\006\031\014\036\uffc9\066" +
    "\076\001\002\000\004\033\342\001\002\000\004\036\uffc6" +
    "\001\002\000\004\033\344\001\002\000\004\036\uffc8\001" +
    "\002\000\054\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\036\uffd8" +
    "\062\uffd8\064\uffd8\066\uffd8\001\002\000\004\066\347\001" +
    "\002\000\006\034\uffa6\040\uffa6\001\002\000\046\011\045" +
    "\012\040\013\033\014\046\015\037\016\050\017\077\021" +
    "\104\022\070\023\100\024\065\025\011\026\012\027\010" +
    "\030\006\031\014\036\351\066\076\001\002\000\036\006" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\036\uffb0\066" +
    "\uffb0\001\002\000\046\011\045\012\040\013\033\014\046" +
    "\015\037\016\050\017\077\021\104\022\070\023\100\024" +
    "\065\025\011\026\012\027\010\030\006\031\014\036\353" +
    "\066\076\001\002\000\036\006\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\036\uffb1\066\uffb1\001\002\000\006\034" +
    "\uffa5\040\uffa5\001\002\000\004\066\361\001\002\000\036" +
    "\006\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\036\ufff1" +
    "\066\ufff1\001\002\000\036\006\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\036\uffed\066\uffed\001\002\000\006\033" +
    "\376\034\264\001\002\000\012\033\uffad\034\uffad\037\362" +
    "\043\246\001\002\000\020\011\045\012\040\013\033\014" +
    "\046\015\037\016\050\040\363\001\002\000\004\035\372" +
    "\001\002\000\006\034\060\040\365\001\002\000\004\035" +
    "\366\001\002\000\046\011\045\012\040\013\033\014\046" +
    "\015\037\016\050\017\077\021\104\022\070\023\100\024" +
    "\065\025\011\026\012\027\010\030\006\031\014\036\367" +
    "\066\076\001\002\000\036\006\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\036\uffe5\066\uffe5\001\002\000\046\011" +
    "\045\012\040\013\033\014\046\015\037\016\050\017\077" +
    "\021\104\022\070\023\100\024\065\025\011\026\012\027" +
    "\010\030\006\031\014\036\371\066\076\001\002\000\036" +
    "\006\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\036\uffe4" +
    "\066\uffe4\001\002\000\046\011\045\012\040\013\033\014" +
    "\046\015\037\016\050\017\077\021\104\022\070\023\100" +
    "\024\065\025\011\026\012\027\010\030\006\031\014\036" +
    "\373\066\076\001\002\000\036\006\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\036\uffe7\066\uffe7\001\002\000\046" +
    "\011\045\012\040\013\033\014\046\015\037\016\050\017" +
    "\077\021\104\022\070\023\100\024\065\025\011\026\012" +
    "\027\010\030\006\031\014\036\375\066\076\001\002\000" +
    "\036\006\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\036" +
    "\uffe6\066\uffe6\001\002\000\036\006\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\036\uffef\066\uffef\001\002\000\006" +
    "\033\u0100\034\264\001\002\000\036\006\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\036\uffee\066\uffee\001\002\000" +
    "\004\037\u0102\001\002\000\020\011\045\012\040\013\033" +
    "\014\046\015\037\016\050\040\u0103\001\002\000\004\035" +
    "\u010a\001\002\000\006\034\060\040\u0105\001\002\000\004" +
    "\035\u0106\001\002\000\046\011\045\012\040\013\033\014" +
    "\046\015\037\016\050\017\077\021\104\022\070\023\100" +
    "\024\065\025\011\026\012\027\010\030\006\031\014\036" +
    "\u0107\066\076\001\002\000\036\006\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\036\uffe9\066\uffe9\001\002\000\046" +
    "\011\045\012\040\013\033\014\046\015\037\016\050\017" +
    "\077\021\104\022\070\023\100\024\065\025\011\026\012" +
    "\027\010\030\006\031\014\036\u0109\066\076\001\002\000" +
    "\036\006\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\036" +
    "\uffe8\066\uffe8\001\002\000\046\011\045\012\040\013\033" +
    "\014\046\015\037\016\050\017\077\021\104\022\070\023" +
    "\100\024\065\025\011\026\012\027\010\030\006\031\014" +
    "\036\u010b\066\076\001\002\000\036\006\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\036\uffeb\066\uffeb\001\002\000" +
    "\046\011\045\012\040\013\033\014\046\015\037\016\050" +
    "\017\077\021\104\022\070\023\100\024\065\025\011\026" +
    "\012\027\010\030\006\031\014\036\u010d\066\076\001\002" +
    "\000\036\006\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\036\uffea\066\uffea\001\002\000\004\002\001\001\002\000" +
    "\022\002\uffff\004\uffff\005\uffff\025\uffff\026\uffff\027\uffff" +
    "\030\uffff\031\uffff\001\002\000\004\066\u0111\001\002\000" +
    "\004\035\030\001\002\000\004\066\u0113\001\002\000\022" +
    "\002\ufff7\004\ufff7\005\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\016\002\006\004\004\005\016\011\017\014" +
    "\003\042\012\001\001\000\002\001\001\000\012\005\016" +
    "\011\017\014\003\042\u010e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\030\001\001\000\016\007\042\013\050\014" +
    "\041\017\040\021\035\041\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\376\001\001\000\010\007\356\017" +
    "\354\021\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\042\014\041\017\040\021\035" +
    "\041\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\056\017\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\345\001\001\000" +
    "\002\001\001\000\030\014\073\017\071\022\102\023\072" +
    "\025\066\033\063\034\074\035\062\040\070\043\100\047" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\267\001\001\000\002" +
    "\001\001\000\004\017\257\001\001\000\002\001\001\000" +
    "\004\024\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\073\017" +
    "\071\023\072\025\066\033\063\034\074\035\062\040\211" +
    "\043\100\047\065\001\001\000\002\001\001\000\004\017" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\113\001\001\000\004\030\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\127\001\001\000\004\030\126\001\001" +
    "\000\004\030\125\001\001\000\004\030\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\133\030\132\001\001\000\006\027" +
    "\213\030\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\136\030\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\143\030\132\001\001\000\006" +
    "\027\142\030\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\164\001\001\000\004" +
    "\030\163\001\001\000\004\030\162\001\001\000\004\030" +
    "\161\001\001\000\004\030\160\001\001\000\004\030\157" +
    "\001\001\000\002\001\001\000\004\030\156\001\001\000" +
    "\004\030\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\166\001\001\000\002\001\001\000\006\044\200\046" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\201\044\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\073\017\071\022\210\023\072\025\066\033" +
    "\063\034\074\035\062\040\070\043\100\047\065\001\001" +
    "\000\002\001\001\000\026\014\073\017\071\023\072\025" +
    "\066\033\063\034\074\035\062\040\211\043\100\047\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\014\073" +
    "\017\071\022\220\023\072\025\066\033\063\034\074\035" +
    "\062\040\070\043\100\047\065\001\001\000\002\001\001" +
    "\000\026\014\073\017\071\023\072\025\066\033\063\034" +
    "\074\035\062\040\211\043\100\047\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\224\030\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\231\030\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\235\030\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\073\017\071\022\241\023\072\025\066" +
    "\033\063\034\074\035\062\040\070\043\100\047\065\001" +
    "\001\000\002\001\001\000\026\014\073\017\071\023\072" +
    "\025\066\033\063\034\074\035\062\040\211\043\100\047" +
    "\065\001\001\000\002\001\001\000\004\036\247\001\001" +
    "\000\002\001\001\000\004\030\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\260\001\001" +
    "\000\002\001\001\000\004\024\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\272\030\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\014\073\017\071\022\276\023" +
    "\072\025\066\033\063\034\074\035\062\040\070\043\100" +
    "\047\065\001\001\000\002\001\001\000\026\014\073\017" +
    "\071\023\072\025\066\033\063\034\074\035\062\040\211" +
    "\043\100\047\065\001\001\000\002\001\001\000\012\010" +
    "\305\027\306\030\132\053\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\312\051\311\001\001\000\002\001\001\000\006\051" +
    "\334\052\332\001\001\000\004\054\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\073\017\071\022" +
    "\325\023\072\025\066\033\063\034\074\035\062\040\070" +
    "\043\100\047\065\001\001\000\026\014\073\017\071\023" +
    "\072\025\066\033\063\034\074\035\062\040\211\043\100" +
    "\047\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\073\017\071\022\337\023\072\025\066\033\063\034\074" +
    "\035\062\040\070\043\100\047\065\001\001\000\026\014" +
    "\073\017\071\023\072\025\066\033\063\034\074\035\062" +
    "\040\211\043\100\047\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\073\017\071\022\351\023\072\025\066\033\063\034\074" +
    "\035\062\040\070\043\100\047\065\001\001\000\002\001" +
    "\001\000\026\014\073\017\071\023\072\025\066\033\063" +
    "\034\074\035\062\040\211\043\100\047\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\357\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\244\001\001\000\006\016\363\017\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\014\073\017\071\022\367\023\072\025\066\033\063" +
    "\034\074\035\062\040\070\043\100\047\065\001\001\000" +
    "\002\001\001\000\026\014\073\017\071\023\072\025\066" +
    "\033\063\034\074\035\062\040\211\043\100\047\065\001" +
    "\001\000\002\001\001\000\030\014\073\017\071\022\373" +
    "\023\072\025\066\033\063\034\074\035\062\040\070\043" +
    "\100\047\065\001\001\000\002\001\001\000\026\014\073" +
    "\017\071\023\072\025\066\033\063\034\074\035\062\040" +
    "\211\043\100\047\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\u0103\017\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\073\017" +
    "\071\022\u0107\023\072\025\066\033\063\034\074\035\062" +
    "\040\070\043\100\047\065\001\001\000\002\001\001\000" +
    "\026\014\073\017\071\023\072\025\066\033\063\034\074" +
    "\035\062\040\211\043\100\047\065\001\001\000\002\001" +
    "\001\000\030\014\073\017\071\022\u010b\023\072\025\066" +
    "\033\063\034\074\035\062\040\070\043\100\047\065\001" +
    "\001\000\002\001\001\000\026\014\073\017\071\023\072" +
    "\025\066\033\063\034\074\035\062\040\211\043\100\047" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0111\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PRINCIPALES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRINCIPALES ::= PRINCIPALES PRINCIPALES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRINCIPALES ::= PRINCIPALES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PRINCIPALES1 ::= IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PRINCIPALES1 ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= iimport IMPORTS1 ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTS1 ::= IMPORTS1 pto id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTS1 ::= IMPORTS1 pto por 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTS1 ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS ::= VISIBILIDAD claass id CUERPO_CLASE id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASS ::= claass id CUERPO_CLASE id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_CLASE ::= llavea DECLARACIONES_CLASE llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_CLASE ::= llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE DECLARACIONES_CLASE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES_CLASE1 ::= VISIBILIDAD MET_FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES_CLASE1 ::= MET_FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES_CLASE1 ::= VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES_CLASE1 ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES_CLASE1 ::= VISIBILIDAD CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACIONES_CLASE1 ::= CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MET_FUNC ::= voiid id para parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MET_FUNC ::= voiid id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MET_FUNC ::= voiid id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MET_FUNC ::= voiid id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MET_FUNC ::= TIPODATOS id para parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MET_FUNC ::= TIPODATOS id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MET_FUNC ::= TIPODATOS id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MET_FUNC ::= TIPODATOS id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES CUERPO_FUNCIONES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_FUNCIONES1 ::= VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_FUNCIONES1 ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_FUNCIONES1 ::= VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_FUNCIONES1 ::= IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_FUNCIONES1 ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_FUNCIONES1 ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO_FUNCIONES1 ::= LLAMADA_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO_FUNCIONES1 ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO_FUNCIONES1 ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SWITCH ::= swiitch para COND_SW parc llavea CASE DEFAULT llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SWITCH ::= swiitch para COND_SW parc llavea CASE llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COND_SW ::= CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_SW",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COND_SW ::= VALORES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_SW",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASE ::= CASE CASE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASE ::= CASE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASE1 ::= casee VALORES dosPtos CUERPO_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CASE1 ::= casee VALORES dosPtos CUERPO_FUNCIONES breeak ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASE1 ::= casee VALORES dosPtos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASE1 ::= casee VALORES dosPtos breeak ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALORES ::= comilla VALORES1 comilla 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALORES ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALORES1 ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES1",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALORES1 ::= num 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES1",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALORES1 ::= decimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES1",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DEFAULT ::= defauult dosPtos CUERPO_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DEFAULT ::= defauult dosPtos CUERPO_FUNCIONES breeak ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DEFAULT ::= defauult dosPtos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEFAULT ::= defauult dosPtos breeak ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF ::= iff para CONDICION parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= iff para CONDICION parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FOR ::= foor para TIPODATOS id asignacion EXPR ptoYcoma CONDICION ptoYcoma PASOFOR parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FOR ::= foor para TIPODATOS id asignacion EXPR ptoYcoma CONDICION ptoYcoma PASOFOR parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PASO ::= incremento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PASO ::= decremento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PASOFOR ::= id asignacion PASO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASOFOR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PASOFOR ::= id asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASOFOR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PASOFOR ::= id PASO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASOFOR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PASOFOR ::= id SIGNOS asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASOFOR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SIGNOS ::= mas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SIGNOS ::= menos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SIGNOS ::= por 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SIGNOS ::= div 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LLAMADA_FUNCIONES ::= id para parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCIONES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LLAMADA_FUNCIONES ::= id para PARAMETROS_FUNC parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCIONES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMETROS_FUNC ::= PARAMETROS_FUNC coma id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNC",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAMETROS_FUNC ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNC",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONSTRUCTOR ::= id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONSTRUCTOR ::= id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONSTRUCTOR ::= id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONSTRUCTOR ::= id para parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARIABLES ::= VARIABLES coma id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARIABLES ::= VARIABLES coma id ASIGNACION_VAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIABLES ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARIABLES ::= id ASIGNACION_VAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // WHILE ::= whilee para CONDICION parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // WHILE ::= whilee para CONDICION parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DO_WHILE ::= doo llavea CUERPO_FUNCIONES llavec whilee para CONDICION parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DO_WHILE ::= doo llavea llavec whilee para CONDICION parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIGNACION_VAR ::= asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETROS ::= PARAMETROS coma TIPODATOS id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMETROS ::= TIPODATOS id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VISIBILIDAD ::= priivate 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VISIBILIDAD ::= puublic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VISIBILIDAD ::= prootected 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VISIBILIDAD ::= fiinal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VISIBILIDAD ::= staatic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPODATOS ::= iint 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPODATOS ::= bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPODATOS ::= string 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPODATOS ::= chaar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPODATOS ::= doublee 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIPODATOS ::= object 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPR ::= EXPR mas EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPR ::= EXPR menos EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPR ::= EXPR por EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPR ::= EXPR div EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPR ::= menos EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPR ::= num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPR ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPR ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPR ::= decimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPR ::= para EXPR parc 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONDICION ::= EXPR mayor EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONDICION ::= EXPR menor EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONDICION ::= EXPR mayorQ EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONDICION ::= EXPR menorQ EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONDICION ::= EXPR iguala EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONDICION ::= EXPR distinto EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONDICION ::= EXPR asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICION ::= EXPR mod EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICION ::= not CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICION ::= CONDICION and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONDICION ::= CONDICION or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONDICION ::= para CONDICION parc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
