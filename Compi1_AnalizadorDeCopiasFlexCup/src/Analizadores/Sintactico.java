
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\004\000\002\004\003\000\002\004\003" +
    "\000\002\005\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\007\007\000\002\007\006\000\002" +
    "\010\005\000\002\010\004\000\002\011\005\000\002\011" +
    "\004\000\002\011\007\000\002\011\006\000\002\011\004" +
    "\000\002\011\003\000\002\011\006\000\002\011\005\000" +
    "\002\017\010\000\002\017\011\000\002\017\011\000\002" +
    "\017\012\000\002\017\010\000\002\017\011\000\002\017" +
    "\011\000\002\017\012\000\002\020\007\000\002\020\006" +
    "\000\002\020\005\000\002\020\011\000\002\020\012\000" +
    "\002\020\004\000\002\020\006\000\002\020\005\000\002" +
    "\020\004\000\002\020\010\000\002\020\011\000\002\020" +
    "\003\000\002\021\005\000\002\021\006\000\002\021\003" +
    "\000\002\021\004\000\002\030\011\000\002\030\010\000" +
    "\002\022\004\000\002\014\006\000\002\014\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\003\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\020\004\015\005\014\023\010\024\012\025" +
    "\011\026\006\027\013\001\002\000\004\005\252\001\002" +
    "\000\022\002\000\004\015\005\014\023\010\024\012\025" +
    "\011\026\006\027\013\001\002\000\022\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\001" +
    "\002\000\004\002\247\001\002\000\022\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\001" +
    "\002\000\022\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\001\002\000\022\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\001\002\000\022\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\001\002\000\004\060\026" +
    "\001\002\000\004\060\020\001\002\000\022\002\ufffd\004" +
    "\ufffd\005\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\001\002\000\022\002\ufffc\004\ufffc\005\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\001\002\000\006\031\ufff8" +
    "\032\ufff8\001\002\000\006\031\023\032\022\001\002\000" +
    "\022\002\ufffb\004\ufffb\005\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\001\002\000\006\051\024\060\025\001" +
    "\002\000\006\031\ufff9\032\ufff9\001\002\000\006\031\ufffa" +
    "\032\ufffa\001\002\000\004\034\027\001\002\000\034\006" +
    "\045\007\033\010\035\011\041\012\043\013\040\014\037" +
    "\023\010\024\012\025\011\026\006\027\013\035\044\001" +
    "\002\000\004\060\031\001\002\000\022\002\ufff6\004\ufff6" +
    "\005\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\001" +
    "\002\000\004\060\221\001\002\000\004\060\uffc9\001\002" +
    "\000\020\006\045\007\033\010\035\011\041\012\043\013" +
    "\040\014\037\001\002\000\004\060\uffc8\001\002\000\034" +
    "\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\035\uffee" +
    "\001\002\000\004\060\uffc4\001\002\000\004\060\uffc5\001" +
    "\002\000\004\060\uffc7\001\002\000\034\006\045\007\033" +
    "\010\035\011\041\012\043\013\040\014\037\023\010\024" +
    "\012\025\011\026\006\027\013\035\215\001\002\000\004" +
    "\060\uffc6\001\002\000\004\060\ufff4\001\002\000\004\060" +
    "\046\001\002\000\004\036\047\001\002\000\020\007\033" +
    "\010\035\011\041\012\043\013\040\014\037\037\051\001" +
    "\002\000\004\060\211\001\002\000\004\034\205\001\002" +
    "\000\006\033\053\037\054\001\002\000\016\007\033\010" +
    "\035\011\041\012\043\013\040\014\037\001\002\000\004" +
    "\034\055\001\002\000\040\007\033\010\035\011\041\012" +
    "\043\013\040\014\037\015\064\020\057\023\010\024\012" +
    "\025\011\026\006\027\013\035\065\060\063\001\002\000" +
    "\040\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\020\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\035\uffd8\060\uffd8\001\002\000\004\036\174\001\002" +
    "\000\004\060\063\001\002\000\006\032\171\033\146\001" +
    "\002\000\016\007\033\010\035\011\041\012\043\013\040" +
    "\014\037\001\002\000\010\032\uffd5\033\uffd5\042\151\001" +
    "\002\000\004\036\156\001\002\000\034\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\035\uffe9\001\002\000\040" +
    "\007\033\010\035\011\041\012\043\013\040\014\037\015" +
    "\073\020\057\023\010\024\012\025\011\026\006\027\013" +
    "\035\074\060\063\001\002\000\040\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\020\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\035\uffde\060\uffde\001" +
    "\002\000\004\060\063\001\002\000\006\032\153\033\146" +
    "\001\002\000\016\007\033\010\035\011\041\012\043\013" +
    "\040\014\037\001\002\000\004\036\075\001\002\000\034" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\035\uffe8" +
    "\001\002\000\014\036\076\057\102\060\105\061\077\062" +
    "\100\001\002\000\014\036\076\057\102\060\105\061\077" +
    "\062\100\001\002\000\036\032\uffb3\033\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\054\uffb3\055\uffb3\001\002\000\036\032" +
    "\uffb4\033\uffb4\037\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\055" +
    "\uffb4\001\002\000\036\032\uffba\033\uffba\037\uffba\040\uffba" +
    "\041\uffba\043\uffba\044\uffba\045\uffba\047\uffba\050\uffba\051" +
    "\121\052\122\054\uffba\055\uffba\001\002\000\036\032\uffb6" +
    "\033\uffb6\037\uffb6\040\uffb6\041\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\055\uffb6" +
    "\001\002\000\036\032\uffb7\033\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\054\uffb7\055\uffb7\001\002\000\026\037\114\040" +
    "\116\041\112\043\106\044\115\045\113\047\117\050\110" +
    "\054\111\055\107\001\002\000\036\032\uffb5\033\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5\045\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5\001\002\000" +
    "\014\036\076\057\102\060\105\061\077\062\100\001\002" +
    "\000\014\036\076\057\102\060\105\061\077\062\100\001" +
    "\002\000\014\036\076\057\102\060\105\061\077\062\100" +
    "\001\002\000\014\036\076\057\102\060\105\061\077\062" +
    "\100\001\002\000\014\036\076\057\102\060\105\061\077" +
    "\062\100\001\002\000\014\036\076\057\102\060\105\061" +
    "\077\062\100\001\002\000\004\034\127\001\002\000\014" +
    "\036\076\057\102\060\105\061\077\062\100\001\002\000" +
    "\014\036\076\057\102\060\105\061\077\062\100\001\002" +
    "\000\014\036\076\057\102\060\105\061\077\062\100\001" +
    "\002\000\036\032\uffc3\033\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3\051\121\052" +
    "\122\054\uffc3\055\uffc3\001\002\000\014\036\076\057\102" +
    "\060\105\061\077\062\100\001\002\000\014\036\076\057" +
    "\102\060\105\061\077\062\100\001\002\000\036\032\uffb8" +
    "\033\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\054\uffb8\055\uffb8" +
    "\001\002\000\036\032\uffb9\033\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\054\uffb9\055\uffb9\001\002\000\036\032\uffc1\033" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\047\uffc1\050\uffc1\051\121\052\122\054\uffc1\055\uffc1\001" +
    "\002\000\036\032\uffbe\033\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\051\121\052" +
    "\122\054\uffbe\055\uffbe\001\002\000\040\007\033\010\035" +
    "\011\041\012\043\013\040\014\037\015\064\020\057\023" +
    "\010\024\012\025\011\026\006\027\013\035\130\060\063" +
    "\001\002\000\040\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\020\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\035\uffe0\060\uffe0\001\002\000\040\007" +
    "\033\010\035\011\041\012\043\013\040\014\037\015\073" +
    "\020\057\023\010\024\012\025\011\026\006\027\013\035" +
    "\132\060\063\001\002\000\040\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\020\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\035\uffdf\060\uffdf\001\002" +
    "\000\036\032\uffbb\033\uffbb\037\uffbb\040\uffbb\041\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb\051\121\052\122" +
    "\054\uffbb\055\uffbb\001\002\000\036\032\uffbf\033\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\045\uffbf\047\uffbf" +
    "\050\uffbf\051\121\052\122\054\uffbf\055\uffbf\001\002\000" +
    "\036\032\uffbd\033\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\047\uffbd\050\uffbd\051\121\052\122\054" +
    "\uffbd\055\uffbd\001\002\000\036\032\uffc2\033\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\050" +
    "\uffc2\051\121\052\122\054\uffc2\055\uffc2\001\002\000\036" +
    "\032\uffbc\033\uffbc\037\uffbc\040\uffbc\041\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\047\uffbc\050\uffbc\051\121\052\122\054\uffbc" +
    "\055\uffbc\001\002\000\036\032\uffc0\033\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\043\uffc0\044\uffc0\045\uffc0\047\uffc0\050\uffc0" +
    "\051\121\052\122\054\uffc0\055\uffc0\001\002\000\026\037" +
    "\142\040\116\041\112\043\106\044\115\045\113\047\117" +
    "\050\110\054\111\055\107\001\002\000\036\032\uffb2\033" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\054\uffb2\055\uffb2\001" +
    "\002\000\004\060\063\001\002\000\006\032\145\033\146" +
    "\001\002\000\040\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\020\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\035\uffe3\060\uffe3\001\002\000\004\060" +
    "\147\001\002\000\010\032\uffd7\033\uffd7\042\151\001\002" +
    "\000\006\032\uffd6\033\uffd6\001\002\000\014\036\076\057" +
    "\102\060\105\061\077\062\100\001\002\000\030\032\uffd1" +
    "\033\uffd1\040\116\041\112\043\106\044\115\045\113\047" +
    "\117\050\110\054\111\055\107\001\002\000\040\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\020" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\035\uffe1" +
    "\060\uffe1\001\002\000\006\032\155\033\146\001\002\000" +
    "\040\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\020\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\035\uffe2\060\uffe2\001\002\000\014\036\076\057\102" +
    "\060\105\061\077\062\100\001\002\000\026\037\160\040" +
    "\116\041\112\043\106\044\115\045\113\047\117\050\110" +
    "\054\111\055\107\001\002\000\004\034\161\001\002\000" +
    "\040\007\033\010\035\011\041\012\043\013\040\014\037" +
    "\015\064\020\057\023\010\024\012\025\011\026\006\027" +
    "\013\035\162\060\063\001\002\000\040\007\uffda\010\uffda" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\020\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\035\uffda\060\uffda" +
    "\001\002\000\040\007\033\010\035\011\041\012\043\013" +
    "\040\014\037\015\073\020\057\023\010\024\012\025\011" +
    "\026\006\027\013\035\164\060\063\001\002\000\040\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\020\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\035" +
    "\uffd9\060\uffd9\001\002\000\006\032\uffd4\033\uffd4\001\002" +
    "\000\004\060\063\001\002\000\006\032\170\033\146\001" +
    "\002\000\040\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\020\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\035\uffdd\060\uffdd\001\002\000\040\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\020" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\035\uffdb" +
    "\060\uffdb\001\002\000\006\032\173\033\146\001\002\000" +
    "\040\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\020\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\035\uffdc\060\uffdc\001\002\000\014\036\076\057\102" +
    "\060\105\061\077\062\100\001\002\000\026\037\176\040" +
    "\116\041\112\043\106\044\115\045\113\047\117\050\110" +
    "\054\111\055\107\001\002\000\004\034\177\001\002\000" +
    "\040\007\033\010\035\011\041\012\043\013\040\014\037" +
    "\015\064\020\057\023\010\024\012\025\011\026\006\027" +
    "\013\035\200\060\063\001\002\000\040\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\020\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\035\uffd2\060\uffd2" +
    "\001\002\000\040\007\033\010\035\011\041\012\043\013" +
    "\040\014\037\015\073\020\057\023\010\024\012\025\011" +
    "\026\006\027\013\035\202\060\063\001\002\000\040\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\020\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\035" +
    "\uffd3\060\uffd3\001\002\000\004\060\204\001\002\000\006" +
    "\033\uffd0\037\uffd0\001\002\000\040\007\033\010\035\011" +
    "\041\012\043\013\040\014\037\015\064\020\057\023\010" +
    "\024\012\025\011\026\006\027\013\035\206\060\063\001" +
    "\002\000\034\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\035\uffeb\001\002\000\040\007\033\010\035\011\041" +
    "\012\043\013\040\014\037\015\073\020\057\023\010\024" +
    "\012\025\011\026\006\027\013\035\210\060\063\001\002" +
    "\000\034\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\035\uffea\001\002\000\006\033\uffcf\037\uffcf\001\002\000" +
    "\004\060\221\001\002\000\020\006\045\007\033\010\035" +
    "\011\041\012\043\013\040\014\037\001\002\000\034\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\035\ufff2\001" +
    "\002\000\004\060\ufff5\001\002\000\004\060\221\001\002" +
    "\000\034\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\035\ufff3\001\002\000\006\032\236\033\146\001\002\000" +
    "\012\032\uffd5\033\uffd5\036\222\042\151\001\002\000\020" +
    "\007\033\010\035\011\041\012\043\013\040\014\037\037" +
    "\223\001\002\000\004\034\232\001\002\000\006\033\053" +
    "\037\225\001\002\000\004\034\226\001\002\000\040\007" +
    "\033\010\035\011\041\012\043\013\040\014\037\015\064" +
    "\020\057\023\010\024\012\025\011\026\006\027\013\035" +
    "\227\060\063\001\002\000\034\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\035\uffe5\001\002\000\040\007\033" +
    "\010\035\011\041\012\043\013\040\014\037\015\073\020" +
    "\057\023\010\024\012\025\011\026\006\027\013\035\231" +
    "\060\063\001\002\000\034\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\035\uffe4\001\002\000\040\007\033\010" +
    "\035\011\041\012\043\013\040\014\037\015\064\020\057" +
    "\023\010\024\012\025\011\026\006\027\013\035\233\060" +
    "\063\001\002\000\034\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\035\uffe7\001\002\000\040\007\033\010\035" +
    "\011\041\012\043\013\040\014\037\015\073\020\057\023" +
    "\010\024\012\025\011\026\006\027\013\035\235\060\063" +
    "\001\002\000\034\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\035\uffe6\001\002\000\034\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\035\ufff1\001\002\000\006\032" +
    "\240\033\146\001\002\000\034\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\035\ufff0\001\002\000\004\060\221" +
    "\001\002\000\034\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\035\uffef\001\002\000\006\032\244\033\146\001" +
    "\002\000\034\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\035\uffed\001\002\000\006\032\246\033\146\001\002" +
    "\000\034\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\035\uffec\001\002\000\004\002\001\001\002\000\022\002" +
    "\uffff\004\uffff\005\uffff\023\uffff\024\uffff\025\uffff\026\uffff" +
    "\027\uffff\001\002\000\022\002\ufffe\004\ufffe\005\ufffe\023" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\001\002\000\004" +
    "\060\253\001\002\000\004\034\027\001\002\000\004\060" +
    "\255\001\002\000\022\002\ufff7\004\ufff7\005\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\014\002\006\004\004\005\015\007\016\012" +
    "\003\001\001\000\002\001\001\000\010\005\247\007\250" +
    "\012\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\027\001\001\000\012" +
    "\011\041\012\033\015\031\017\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\244\001\001\000\002" +
    "\001\001\000\006\015\240\017\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\212\015\211\017\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\051\015\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\202\001\001\000\002\001\001\000\014\012\061\015" +
    "\057\020\065\021\060\030\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\171\001\001\000\002\001" +
    "\001\000\004\015\165\001\001\000\004\022\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\071\015" +
    "\067\021\070\030\066\001\001\000\002\001\001\000\004" +
    "\021\153\001\001\000\002\001\001\000\004\015\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\103" +
    "\026\100\027\102\001\001\000\010\003\140\026\100\027" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\137\027\102\001\001" +
    "\000\006\026\136\027\102\001\001\000\006\026\135\027" +
    "\102\001\001\000\006\026\134\027\102\001\001\000\006" +
    "\026\133\027\102\001\001\000\006\026\132\027\102\001" +
    "\001\000\002\001\001\000\006\026\125\027\102\001\001" +
    "\000\006\026\124\027\102\001\001\000\006\026\117\027" +
    "\102\001\001\000\002\001\001\000\004\027\123\001\001" +
    "\000\004\027\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\061" +
    "\015\057\020\130\021\060\030\055\001\001\000\002\001" +
    "\001\000\012\012\071\015\067\021\070\030\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\147\001\001\000\002\001\001\000" +
    "\010\003\151\026\100\027\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\156\026\100\027\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\061\015\057\020\162\021" +
    "\060\030\055\001\001\000\002\001\001\000\012\012\071" +
    "\015\067\021\070\030\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\174\026\100\027\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\061\015" +
    "\057\020\200\021\060\030\055\001\001\000\002\001\001" +
    "\000\012\012\071\015\067\021\070\030\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\061\015\057\020\206\021\060\030\055\001\001\000" +
    "\002\001\001\000\012\012\071\015\067\021\070\030\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\236\001\001\000\006\015\215\017\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\164\001\001" +
    "\000\006\014\223\015\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\061\015\057" +
    "\020\227\021\060\030\055\001\001\000\002\001\001\000" +
    "\012\012\071\015\067\021\070\030\066\001\001\000\002" +
    "\001\001\000\014\012\061\015\057\020\233\021\060\030" +
    "\055\001\001\000\002\001\001\000\012\012\071\015\067" +
    "\021\070\030\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\253\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PRINCIPALES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRINCIPALES ::= PRINCIPALES IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRINCIPALES ::= PRINCIPALES CLASS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PRINCIPALES ::= IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PRINCIPALES ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= iimport IMPORTS1 ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTS1 ::= IMPORTS1 pto id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTS1 ::= IMPORTS1 pto por 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTS1 ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS ::= VISIBILIDAD claass id CUERPO_CLASE id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASS ::= claass id CUERPO_CLASE id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_CLASE ::= llavea DECLARACIONES_CLASE llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_CLASE ::= llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE VISIBILIDAD MET_FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE MET_FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES_CLASE ::= VISIBILIDAD MET_FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES_CLASE ::= MET_FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES_CLASE ::= VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACIONES_CLASE ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MET_FUNC ::= voiid id para parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MET_FUNC ::= voiid id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MET_FUNC ::= voiid id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MET_FUNC ::= voiid id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MET_FUNC ::= TIPODATOS id para parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MET_FUNC ::= TIPODATOS id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MET_FUNC ::= TIPODATOS id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MET_FUNC ::= TIPODATOS id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES iff para E parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES iff para E parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_FUNCIONES ::= VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_FUNCIONES ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO_FUNCIONES ::= VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO_FUNCIONES ::= iff para E parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO_FUNCIONES ::= iff para E parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPO_FUNCIONES ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARIABLES ::= VARIABLES coma id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARIABLES ::= VARIABLES coma id ASIGNACION_VAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARIABLES ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARIABLES ::= id ASIGNACION_VAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WHILE ::= whilee para E parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WHILE ::= whilee para E parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION_VAR ::= asignacion E 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMETROS ::= PARAMETROS coma TIPODATOS id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMETROS ::= TIPODATOS id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VISIBILIDAD ::= priivate 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VISIBILIDAD ::= puublic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VISIBILIDAD ::= prootected 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VISIBILIDAD ::= fiinal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VISIBILIDAD ::= staatic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPODATOS ::= iint 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPODATOS ::= bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPODATOS ::= string 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPODATOS ::= chaar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPODATOS ::= doublee 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPODATOS ::= object 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E mas MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E menos MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E mayor MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E mayorQ MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E menor MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E menorQ MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E and MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E or MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E distinto MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= MULT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MULT ::= MULT por VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MULT",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MULT ::= MULT div VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MULT",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MULT ::= VALOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MULT",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALOR ::= num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALOR ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALOR ::= decimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALOR ::= para E parc 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
