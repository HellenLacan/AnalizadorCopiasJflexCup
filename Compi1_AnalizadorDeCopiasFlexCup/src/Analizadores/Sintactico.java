
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\041\003\000\002\041\003" +
    "\000\002\005\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\010\007\000\002\010\006\000\002" +
    "\011\005\000\002\011\004\000\002\012\004\000\002\012" +
    "\003\000\002\040\004\000\002\040\003\000\002\040\006" +
    "\000\002\040\005\000\002\040\004\000\002\040\003\000" +
    "\002\020\010\000\002\020\011\000\002\020\011\000\002" +
    "\020\012\000\002\020\010\000\002\020\011\000\002\020" +
    "\011\000\002\020\012\000\002\021\004\000\002\021\003" +
    "\000\002\037\006\000\002\037\005\000\002\037\004\000" +
    "\002\037\010\000\002\037\011\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\042" +
    "\020\000\002\042\017\000\002\043\003\000\002\043\003" +
    "\000\002\044\005\000\002\044\005\000\002\044\004\000" +
    "\002\044\006\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\034\006\000\002\034" +
    "\007\000\002\035\005\000\002\035\003\000\002\007\011" +
    "\000\002\007\010\000\002\007\010\000\002\007\007\000" +
    "\002\022\005\000\002\022\006\000\002\022\003\000\002" +
    "\022\004\000\002\032\011\000\002\032\010\000\002\033" +
    "\013\000\002\033\012\000\002\023\004\000\002\015\006" +
    "\000\002\015\004\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\004\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\004\000\002\026\005\000\002" +
    "\026\005\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\020\004\016\005\015\023\010\024\012\025" +
    "\011\026\006\027\014\001\002\000\004\005\350\001\002" +
    "\000\022\002\000\004\016\005\015\023\010\024\012\025" +
    "\011\026\006\027\014\001\002\000\024\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\061" +
    "\uffb6\001\002\000\004\002\346\001\002\000\024\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\061\uffb9\001\002\000\024\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\061\uffb7\001" +
    "\002\000\024\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\061\uffb8\001\002\000\022\002" +
    "\ufffe\004\ufffe\005\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\001\002\000\024\005\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\061\uffb5\001\002" +
    "\000\004\061\027\001\002\000\004\061\021\001\002\000" +
    "\022\002\ufffd\004\ufffd\005\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\001\002\000\022\002\ufffc\004\ufffc\005" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\001\002" +
    "\000\006\030\ufff8\031\ufff8\001\002\000\006\030\024\031" +
    "\023\001\002\000\022\002\ufffb\004\ufffb\005\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\001\002\000\006\050" +
    "\025\061\026\001\002\000\006\030\ufff9\031\ufff9\001\002" +
    "\000\006\030\ufffa\031\ufffa\001\002\000\004\033\030\001" +
    "\002\000\036\006\034\007\045\010\040\011\033\012\046" +
    "\013\037\014\050\023\010\024\012\025\011\026\006\027" +
    "\014\034\047\061\044\001\002\000\004\061\032\001\002" +
    "\000\022\002\ufff6\004\ufff6\005\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\001\002\000\004\061\uffb2\001\002" +
    "\000\004\061\331\001\002\000\036\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\034\ufff2\061\ufff2\001\002\000" +
    "\036\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\034" +
    "\ufff0\061\ufff0\001\002\000\004\061\uffb0\001\002\000\004" +
    "\061\uffb3\001\002\000\004\061\311\001\002\000\022\006" +
    "\034\007\045\010\040\011\033\012\046\013\037\014\050" +
    "\061\044\001\002\000\036\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\034\uffec\061\uffec\001\002\000\004\035" +
    "\054\001\002\000\004\061\uffb4\001\002\000\004\061\uffb1" +
    "\001\002\000\004\061\ufff4\001\002\000\004\061\uffaf\001" +
    "\002\000\036\006\034\007\045\010\040\011\033\012\046" +
    "\013\037\014\050\023\010\024\012\025\011\026\006\027" +
    "\014\034\053\061\044\001\002\000\036\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\034\ufff3\061\ufff3\001\002" +
    "\000\004\061\ufff5\001\002\000\020\007\045\010\040\011" +
    "\033\012\046\013\037\014\050\036\056\001\002\000\004" +
    "\061\304\001\002\000\004\033\300\001\002\000\006\032" +
    "\060\036\061\001\002\000\016\007\045\010\040\011\033" +
    "\012\046\013\037\014\050\001\002\000\004\033\062\001" +
    "\002\000\044\007\045\010\040\011\033\012\046\013\037" +
    "\014\050\015\074\017\101\020\065\021\075\023\010\024" +
    "\012\025\011\026\006\027\014\034\077\061\073\001\002" +
    "\000\044\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\017\uffda\020\uffda\021\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\034\uffda\061\uffda\001\002\000" +
    "\044\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\034\uffdc\061\uffdc\001\002\000\004" +
    "\035\267\001\002\000\044\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\034\uffe2\061" +
    "\uffe2\001\002\000\004\061\257\001\002\000\006\031\264" +
    "\032\261\001\002\000\016\007\045\010\040\011\033\012" +
    "\046\013\037\014\050\001\002\000\044\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\034\uffdb\061\uffdb\001\002\000\012\031\uffc2\032\uffc2\035" +
    "\241\041\243\001\002\000\004\035\232\001\002\000\004" +
    "\033\214\001\002\000\044\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\034\uffd9\061" +
    "\uffd9\001\002\000\036\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\034\uffc7\061\uffc7\001\002\000\044\007\045" +
    "\010\040\011\033\012\046\013\037\014\050\015\074\017" +
    "\101\020\065\021\075\023\010\024\012\025\011\026\006" +
    "\027\014\034\213\061\073\001\002\000\004\035\102\001" +
    "\002\000\016\007\045\010\040\011\033\012\046\013\037" +
    "\014\050\001\002\000\004\061\104\001\002\000\004\041" +
    "\105\001\002\000\016\035\106\047\113\060\112\061\114" +
    "\062\107\063\110\001\002\000\016\035\106\047\113\060" +
    "\112\061\114\062\107\063\110\001\002\000\044\031\uffa6" +
    "\032\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\055\uffa6\056\uffa6\001\002\000\044\031\uffa7\032" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\055\uffa7\056\uffa7\001\002\000\014\031\126\046\117" +
    "\047\120\050\116\051\121\001\002\000\044\031\uffa9\032" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\055\uffa9\056\uffa9\001\002\000\016\035\106\047\113" +
    "\060\112\061\114\062\107\063\110\001\002\000\044\031" +
    "\uffa8\032\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\055\uffa8\056\uffa8\001\002\000\044\031\uffaa" +
    "\032\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\116\051\121" +
    "\052\uffaa\055\uffaa\056\uffaa\001\002\000\016\035\106\047" +
    "\113\060\112\061\114\062\107\063\110\001\002\000\016" +
    "\035\106\047\113\060\112\061\114\062\107\063\110\001" +
    "\002\000\016\035\106\047\113\060\112\061\114\062\107" +
    "\063\110\001\002\000\016\035\106\047\113\060\112\061" +
    "\114\062\107\063\110\001\002\000\044\031\uffab\032\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\055\uffab\056\uffab\001\002\000\044\031\uffad\032\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\116\051\121\052\uffad\055" +
    "\uffad\056\uffad\001\002\000\044\031\uffae\032\uffae\036\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\116\051\121\052\uffae\055\uffae" +
    "\056\uffae\001\002\000\044\031\uffac\032\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\055\uffac\056" +
    "\uffac\001\002\000\020\035\132\047\113\057\127\060\112" +
    "\061\114\062\107\063\110\001\002\000\020\035\132\047" +
    "\113\057\127\060\112\061\114\062\107\063\110\001\002" +
    "\000\032\037\152\040\145\041\144\042\143\043\151\044" +
    "\146\045\142\046\117\047\120\050\116\051\121\052\147" +
    "\001\002\000\010\031\163\055\135\056\136\001\002\000" +
    "\020\035\132\047\113\057\127\060\112\061\114\062\107" +
    "\063\110\001\002\000\034\036\150\037\152\040\145\041" +
    "\144\042\143\043\151\044\146\045\142\046\117\047\120" +
    "\050\116\051\121\052\147\001\002\000\010\036\137\055" +
    "\135\056\136\001\002\000\020\035\132\047\113\057\127" +
    "\060\112\061\114\062\107\063\110\001\002\000\020\035" +
    "\132\047\113\057\127\060\112\061\114\062\107\063\110" +
    "\001\002\000\012\031\uff99\036\uff99\055\uff99\056\uff99\001" +
    "\002\000\012\031\uff9a\036\uff9a\055\uff9a\056\uff9a\001\002" +
    "\000\012\031\uff9b\036\uff9b\055\uff9b\056\uff9b\001\002\000" +
    "\016\035\106\047\113\060\112\061\114\062\107\063\110" +
    "\001\002\000\016\035\106\047\113\060\112\061\114\062" +
    "\107\063\110\001\002\000\016\035\106\047\113\060\112" +
    "\061\114\062\107\063\110\001\002\000\016\035\106\047" +
    "\113\060\112\061\114\062\107\063\110\001\002\000\016" +
    "\035\106\047\113\060\112\061\114\062\107\063\110\001" +
    "\002\000\016\035\106\047\113\060\112\061\114\062\107" +
    "\063\110\001\002\000\044\031\uffa5\032\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\055\uffa5\056" +
    "\uffa5\001\002\000\016\035\106\047\113\060\112\061\114" +
    "\062\107\063\110\001\002\000\016\035\106\047\113\060" +
    "\112\061\114\062\107\063\110\001\002\000\022\031\uffa4" +
    "\036\uffa4\046\117\047\120\050\116\051\121\055\uffa4\056" +
    "\uffa4\001\002\000\022\031\uffa1\036\uffa1\046\117\047\120" +
    "\050\116\051\121\055\uffa1\056\uffa1\001\002\000\022\031" +
    "\uff9d\036\uff9d\046\117\047\120\050\116\051\121\055\uff9d" +
    "\056\uff9d\001\002\000\022\031\uff9f\036\uff9f\046\117\047" +
    "\120\050\116\051\121\055\uff9f\056\uff9f\001\002\000\022" +
    "\031\uffa3\036\uffa3\046\117\047\120\050\116\051\121\055" +
    "\uffa3\056\uffa3\001\002\000\022\031\uff9e\036\uff9e\046\117" +
    "\047\120\050\116\051\121\055\uff9e\056\uff9e\001\002\000" +
    "\022\031\uffa2\036\uffa2\046\117\047\120\050\116\051\121" +
    "\055\uffa2\056\uffa2\001\002\000\022\031\uffa0\036\uffa0\046" +
    "\117\047\120\050\116\051\121\055\uffa0\056\uffa0\001\002" +
    "\000\004\061\165\001\002\000\004\036\203\001\002\000" +
    "\020\041\170\046\175\047\167\050\174\051\166\053\172" +
    "\054\173\001\002\000\004\041\uffcd\001\002\000\004\041" +
    "\uffcf\001\002\000\022\035\106\047\113\053\172\054\173" +
    "\060\112\061\114\062\107\063\110\001\002\000\004\041" +
    "\177\001\002\000\004\036\uffd6\001\002\000\004\036\uffd5" +
    "\001\002\000\004\041\uffce\001\002\000\004\041\uffd0\001" +
    "\002\000\004\036\uffd2\001\002\000\016\035\106\047\113" +
    "\060\112\061\114\062\107\063\110\001\002\000\014\036" +
    "\uffd1\046\117\047\120\050\116\051\121\001\002\000\014" +
    "\036\uffd3\046\117\047\120\050\116\051\121\001\002\000" +
    "\004\036\uffd4\001\002\000\004\033\204\001\002\000\044" +
    "\007\045\010\040\011\033\012\046\013\037\014\050\015" +
    "\074\017\101\020\065\021\075\023\010\024\012\025\011" +
    "\026\006\027\014\034\205\061\073\001\002\000\044\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\034\uffd7\061\uffd7\001\002\000\044\007\045" +
    "\010\040\011\033\012\046\013\037\014\050\015\074\017" +
    "\101\020\065\021\075\023\010\024\012\025\011\026\006" +
    "\027\014\034\210\061\073\001\002\000\044\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\034\uffe3\061\uffe3\001\002\000\044\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\034\uffd8\061\uffd8\001\002\000\012\031\uff9c\036\uff9c\055" +
    "\uff9c\056\uff9c\001\002\000\014\036\150\046\117\047\120" +
    "\050\116\051\121\001\002\000\036\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\034\uffc8\061\uffc8\001\002\000" +
    "\044\007\045\010\040\011\033\012\046\013\037\014\050" +
    "\015\074\017\101\020\065\021\075\023\010\024\012\025" +
    "\011\026\006\027\014\034\215\061\073\001\002\000\004" +
    "\020\225\001\002\000\044\007\045\010\040\011\033\012" +
    "\046\013\037\014\050\015\074\017\101\020\065\021\075" +
    "\023\010\024\012\025\011\026\006\027\014\034\217\061" +
    "\073\001\002\000\004\020\220\001\002\000\004\035\221" +
    "\001\002\000\020\035\132\047\113\057\127\060\112\061" +
    "\114\062\107\063\110\001\002\000\010\036\223\055\135" +
    "\056\136\001\002\000\004\031\224\001\002\000\044\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\034\uffbe\061\uffbe\001\002\000\004\035\226" +
    "\001\002\000\020\035\132\047\113\057\127\060\112\061" +
    "\114\062\107\063\110\001\002\000\010\036\230\055\135" +
    "\056\136\001\002\000\004\031\231\001\002\000\044\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\034\uffbd\061\uffbd\001\002\000\020\035\132" +
    "\047\113\057\127\060\112\061\114\062\107\063\110\001" +
    "\002\000\010\036\234\055\135\056\136\001\002\000\004" +
    "\033\235\001\002\000\044\007\045\010\040\011\033\012" +
    "\046\013\037\014\050\015\074\017\101\020\065\021\075" +
    "\023\010\024\012\025\011\026\006\027\014\034\236\061" +
    "\073\001\002\000\044\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\017\uffde\020\uffde\021\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\034\uffde\061\uffde" +
    "\001\002\000\044\007\045\010\040\011\033\012\046\013" +
    "\037\014\050\015\074\017\101\020\065\021\075\023\010" +
    "\024\012\025\011\026\006\027\014\034\240\061\073\001" +
    "\002\000\044\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\034\uffdd\061\uffdd\001\002" +
    "\000\006\036\246\061\247\001\002\000\006\031\uffc1\032" +
    "\uffc1\001\002\000\016\035\106\047\113\060\112\061\114" +
    "\062\107\063\110\001\002\000\016\031\uffbc\032\uffbc\046" +
    "\117\047\120\050\116\051\121\001\002\000\006\032\251" +
    "\036\252\001\002\000\004\031\250\001\002\000\006\032" +
    "\uffc9\036\uffc9\001\002\000\044\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\034\uffcc" +
    "\061\uffcc\001\002\000\004\061\254\001\002\000\004\031" +
    "\253\001\002\000\044\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\034\uffcb\061\uffcb" +
    "\001\002\000\006\032\uffca\036\uffca\001\002\000\004\061" +
    "\257\001\002\000\006\031\260\032\261\001\002\000\010" +
    "\031\uffc2\032\uffc2\041\243\001\002\000\044\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\034\uffe1\061\uffe1\001\002\000\004\061\262\001\002" +
    "\000\010\031\uffc4\032\uffc4\041\243\001\002\000\006\031" +
    "\uffc3\032\uffc3\001\002\000\044\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\034\uffdf" +
    "\061\uffdf\001\002\000\006\031\266\032\261\001\002\000" +
    "\044\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\034\uffe0\061\uffe0\001\002\000\020" +
    "\035\132\047\113\057\127\060\112\061\114\062\107\063" +
    "\110\001\002\000\010\036\271\055\135\056\136\001\002" +
    "\000\004\033\272\001\002\000\044\007\045\010\040\011" +
    "\033\012\046\013\037\014\050\015\074\017\101\020\065" +
    "\021\075\023\010\024\012\025\011\026\006\027\014\034" +
    "\273\061\073\001\002\000\044\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\034\uffbf" +
    "\061\uffbf\001\002\000\044\007\045\010\040\011\033\012" +
    "\046\013\037\014\050\015\074\017\101\020\065\021\075" +
    "\023\010\024\012\025\011\026\006\027\014\034\275\061" +
    "\073\001\002\000\044\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\034\uffc0\061\uffc0" +
    "\001\002\000\004\061\277\001\002\000\006\032\uffbb\036" +
    "\uffbb\001\002\000\044\007\045\010\040\011\033\012\046" +
    "\013\037\014\050\015\074\017\101\020\065\021\075\023" +
    "\010\024\012\025\011\026\006\027\014\034\301\061\073" +
    "\001\002\000\036\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\034\uffc5\061\uffc5\001\002\000\044\007\045\010" +
    "\040\011\033\012\046\013\037\014\050\015\074\017\101" +
    "\020\065\021\075\023\010\024\012\025\011\026\006\027" +
    "\014\034\303\061\073\001\002\000\036\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\034\uffc6\061\uffc6\001\002" +
    "\000\006\032\uffba\036\uffba\001\002\000\004\061\311\001" +
    "\002\000\036\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\034\ufff1\061\ufff1\001\002\000\036\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\034\uffed\061\uffed\001\002" +
    "\000\006\031\326\032\261\001\002\000\012\031\uffc2\032" +
    "\uffc2\035\312\041\243\001\002\000\020\007\045\010\040" +
    "\011\033\012\046\013\037\014\050\036\313\001\002\000" +
    "\004\033\322\001\002\000\006\032\060\036\315\001\002" +
    "\000\004\033\316\001\002\000\044\007\045\010\040\011" +
    "\033\012\046\013\037\014\050\015\074\017\101\020\065" +
    "\021\075\023\010\024\012\025\011\026\006\027\014\034" +
    "\317\061\073\001\002\000\036\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\034\uffe5\061\uffe5\001\002\000\044" +
    "\007\045\010\040\011\033\012\046\013\037\014\050\015" +
    "\074\017\101\020\065\021\075\023\010\024\012\025\011" +
    "\026\006\027\014\034\321\061\073\001\002\000\036\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\034\uffe4\061" +
    "\uffe4\001\002\000\044\007\045\010\040\011\033\012\046" +
    "\013\037\014\050\015\074\017\101\020\065\021\075\023" +
    "\010\024\012\025\011\026\006\027\014\034\323\061\073" +
    "\001\002\000\036\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\034\uffe7\061\uffe7\001\002\000\044\007\045\010" +
    "\040\011\033\012\046\013\037\014\050\015\074\017\101" +
    "\020\065\021\075\023\010\024\012\025\011\026\006\027" +
    "\014\034\325\061\073\001\002\000\036\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\034\uffe6\061\uffe6\001\002" +
    "\000\036\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\034\uffef\061\uffef\001\002\000\006\031\330\032\261\001" +
    "\002\000\036\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\034\uffee\061\uffee\001\002\000\004\035\332\001\002" +
    "\000\020\007\045\010\040\011\033\012\046\013\037\014" +
    "\050\036\333\001\002\000\004\033\342\001\002\000\006" +
    "\032\060\036\335\001\002\000\004\033\336\001\002\000" +
    "\044\007\045\010\040\011\033\012\046\013\037\014\050" +
    "\015\074\017\101\020\065\021\075\023\010\024\012\025" +
    "\011\026\006\027\014\034\337\061\073\001\002\000\036" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\034\uffe9" +
    "\061\uffe9\001\002\000\044\007\045\010\040\011\033\012" +
    "\046\013\037\014\050\015\074\017\101\020\065\021\075" +
    "\023\010\024\012\025\011\026\006\027\014\034\341\061" +
    "\073\001\002\000\036\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\034\uffe8\061\uffe8\001\002\000\044\007\045" +
    "\010\040\011\033\012\046\013\037\014\050\015\074\017" +
    "\101\020\065\021\075\023\010\024\012\025\011\026\006" +
    "\027\014\034\343\061\073\001\002\000\036\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\034\uffeb\061\uffeb\001" +
    "\002\000\044\007\045\010\040\011\033\012\046\013\037" +
    "\014\050\015\074\017\101\020\065\021\075\023\010\024" +
    "\012\025\011\026\006\027\014\034\345\061\073\001\002" +
    "\000\036\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\034\uffea\061\uffea\001\002\000\004\002\001\001\002\000" +
    "\022\002\uffff\004\uffff\005\uffff\023\uffff\024\uffff\025\uffff" +
    "\026\uffff\027\uffff\001\002\000\004\061\351\001\002\000" +
    "\004\033\030\001\002\000\004\061\353\001\002\000\022" +
    "\002\ufff7\004\ufff7\005\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\016\002\006\004\004\005\016\010\017\013" +
    "\003\041\012\001\001\000\002\001\001\000\012\005\016" +
    "\010\017\013\003\041\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\030\001\001\000\016\007\042\012\050\013" +
    "\041\016\040\020\035\040\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\326\001\001\000\010\007\306\016" +
    "\304\020\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\042\013\041\016\040\020\035" +
    "\040\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\056\016\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\275\001\001\000" +
    "\002\001\001\000\024\013\070\016\066\021\077\022\067" +
    "\032\063\033\071\034\062\037\065\042\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\264\001\001\000\002\001\001\000" +
    "\004\016\254\001\001\000\002\001\001\000\004\023\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\070\016\066\022\067" +
    "\032\063\033\071\034\062\037\206\042\075\001\001\000" +
    "\002\001\001\000\004\016\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\110\001\001\000\004\027" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\124\001\001" +
    "\000\004\027\123\001\001\000\004\027\122\001\001\000" +
    "\004\027\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\130\027" +
    "\127\001\001\000\006\026\210\027\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\133\027\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\140" +
    "\027\127\001\001\000\006\026\137\027\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\161\001\001\000\004\027\160\001\001\000\004\027" +
    "\157\001\001\000\004\027\156\001\001\000\004\027\155" +
    "\001\001\000\004\027\154\001\001\000\002\001\001\000" +
    "\004\027\153\001\001\000\004\027\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\163\001\001\000\002\001" +
    "\001\000\006\043\175\045\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\200\043\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\013\070\016\066\021" +
    "\205\022\067\032\063\033\071\034\062\037\065\042\075" +
    "\001\001\000\002\001\001\000\022\013\070\016\066\022" +
    "\067\032\063\033\071\034\062\037\206\042\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\013\070\016\066" +
    "\021\215\022\067\032\063\033\071\034\062\037\065\042" +
    "\075\001\001\000\002\001\001\000\022\013\070\016\066" +
    "\022\067\032\063\033\071\034\062\037\206\042\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\221" +
    "\027\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\226\027\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\232\027\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\013\070\016\066\021\236\022" +
    "\067\032\063\033\071\034\062\037\065\042\075\001\001" +
    "\000\002\001\001\000\022\013\070\016\066\022\067\032" +
    "\063\033\071\034\062\037\206\042\075\001\001\000\002" +
    "\001\001\000\004\035\244\001\001\000\002\001\001\000" +
    "\004\027\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\255\001\001\000\002\001\001\000" +
    "\004\023\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\267" +
    "\027\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\013\070\016\066\021\273\022\067\032\063\033\071" +
    "\034\062\037\065\042\075\001\001\000\002\001\001\000" +
    "\022\013\070\016\066\022\067\032\063\033\071\034\062" +
    "\037\206\042\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\070\016\066\021\301" +
    "\022\067\032\063\033\071\034\062\037\065\042\075\001" +
    "\001\000\002\001\001\000\022\013\070\016\066\022\067" +
    "\032\063\033\071\034\062\037\206\042\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\241\001\001\000\006\015\313\016\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\013\070\016\066\021\317\022\067\032\063\033\071" +
    "\034\062\037\065\042\075\001\001\000\002\001\001\000" +
    "\022\013\070\016\066\022\067\032\063\033\071\034\062" +
    "\037\206\042\075\001\001\000\002\001\001\000\024\013" +
    "\070\016\066\021\323\022\067\032\063\033\071\034\062" +
    "\037\065\042\075\001\001\000\002\001\001\000\022\013" +
    "\070\016\066\022\067\032\063\033\071\034\062\037\206" +
    "\042\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\333\016\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\070\016\066\021\337" +
    "\022\067\032\063\033\071\034\062\037\065\042\075\001" +
    "\001\000\002\001\001\000\022\013\070\016\066\022\067" +
    "\032\063\033\071\034\062\037\206\042\075\001\001\000" +
    "\002\001\001\000\024\013\070\016\066\021\343\022\067" +
    "\032\063\033\071\034\062\037\065\042\075\001\001\000" +
    "\002\001\001\000\022\013\070\016\066\022\067\032\063" +
    "\033\071\034\062\037\206\042\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\351\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PRINCIPALES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRINCIPALES ::= PRINCIPALES PRINCIPALES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRINCIPALES ::= PRINCIPALES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PRINCIPALES1 ::= IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PRINCIPALES1 ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= iimport IMPORTS1 ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTS1 ::= IMPORTS1 pto id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTS1 ::= IMPORTS1 pto por 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTS1 ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS ::= VISIBILIDAD claass id CUERPO_CLASE id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASS ::= claass id CUERPO_CLASE id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_CLASE ::= llavea DECLARACIONES_CLASE llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_CLASE ::= llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE DECLARACIONES_CLASE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES_CLASE1 ::= VISIBILIDAD MET_FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES_CLASE1 ::= MET_FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES_CLASE1 ::= VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES_CLASE1 ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES_CLASE1 ::= VISIBILIDAD CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACIONES_CLASE1 ::= CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MET_FUNC ::= voiid id para parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MET_FUNC ::= voiid id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MET_FUNC ::= voiid id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MET_FUNC ::= voiid id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MET_FUNC ::= TIPODATOS id para parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MET_FUNC ::= TIPODATOS id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MET_FUNC ::= TIPODATOS id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MET_FUNC ::= TIPODATOS id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES CUERPO_FUNCIONES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_FUNCIONES1 ::= VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_FUNCIONES1 ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_FUNCIONES1 ::= VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_FUNCIONES1 ::= iff para CONDICION parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_FUNCIONES1 ::= iff para CONDICION parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_FUNCIONES1 ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO_FUNCIONES1 ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO_FUNCIONES1 ::= LLAMADA_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO_FUNCIONES1 ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FOR ::= foor para TIPODATOS id asignacion EXPR ptoYcoma CONDICION ptoYcoma PASOFOR parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FOR ::= foor para TIPODATOS id asignacion EXPR ptoYcoma CONDICION ptoYcoma PASOFOR parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PASO ::= incremento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PASO ::= decremento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PASOFOR ::= id asignacion PASO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASOFOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PASOFOR ::= id asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASOFOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PASOFOR ::= id PASO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASOFOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PASOFOR ::= id SIGNOS asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASOFOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIGNOS ::= mas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SIGNOS ::= menos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SIGNOS ::= por 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIGNOS ::= div 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LLAMADA_FUNCIONES ::= id para parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCIONES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LLAMADA_FUNCIONES ::= id para PARAMETROS_FUNC parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCIONES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETROS_FUNC ::= PARAMETROS_FUNC coma id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNC",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROS_FUNC ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNC",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONSTRUCTOR ::= id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONSTRUCTOR ::= id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONSTRUCTOR ::= id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONSTRUCTOR ::= id para parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLES ::= VARIABLES coma id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLES ::= VARIABLES coma id ASIGNACION_VAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLES ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= id ASIGNACION_VAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WHILE ::= whilee para CONDICION parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WHILE ::= whilee para CONDICION parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DO_WHILE ::= doo llavea CUERPO_FUNCIONES llavec whilee para CONDICION parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DO_WHILE ::= doo llavea llavec whilee para CONDICION parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACION_VAR ::= asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMETROS ::= PARAMETROS coma TIPODATOS id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMETROS ::= TIPODATOS id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VISIBILIDAD ::= priivate 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VISIBILIDAD ::= puublic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VISIBILIDAD ::= prootected 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VISIBILIDAD ::= fiinal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VISIBILIDAD ::= staatic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPODATOS ::= iint 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPODATOS ::= bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPODATOS ::= string 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPODATOS ::= chaar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPODATOS ::= doublee 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPODATOS ::= object 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPR ::= EXPR mas EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPR ::= EXPR menos EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPR ::= EXPR por EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPR ::= EXPR div EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR ::= menos EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR ::= num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPR ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPR ::= decimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPR ::= para EXPR parc 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= EXPR mayor EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICION ::= EXPR menor EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDICION ::= EXPR mayorQ EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICION ::= EXPR menorQ EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICION ::= EXPR iguala EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDICION ::= EXPR distinto EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICION ::= EXPR asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICION ::= EXPR mod EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONDICION ::= not CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONDICION ::= CONDICION and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONDICION ::= CONDICION or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONDICION ::= para CONDICION parc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
