
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Bases.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\044\003\000\002\044\003" +
    "\000\002\005\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\012\006\000\002\012\005\000\002" +
    "\013\005\000\002\013\004\000\002\014\004\000\002\014" +
    "\003\000\002\043\004\000\002\043\003\000\002\043\006" +
    "\000\002\043\005\000\002\043\004\000\002\043\003\000" +
    "\002\022\010\000\002\022\011\000\002\022\011\000\002" +
    "\022\012\000\002\022\010\000\002\022\011\000\002\022" +
    "\011\000\002\022\012\000\002\023\004\000\002\023\003" +
    "\000\002\042\006\000\002\042\005\000\002\042\004\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\017\006\000\002\017\004\000\002\024\005" +
    "\000\002\024\006\000\002\024\003\000\002\024\004\000" +
    "\002\025\004\000\002\030\012\000\002\051\012\000\002" +
    "\051\011\000\002\010\003\000\002\010\003\000\002\052" +
    "\004\000\002\052\003\000\002\053\006\000\002\053\007" +
    "\000\002\053\005\000\002\053\006\000\002\060\004\000" +
    "\002\060\004\000\002\060\007\000\002\060\005\000\002" +
    "\056\005\000\002\056\003\000\002\056\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\054\005" +
    "\000\002\054\006\000\002\054\004\000\002\054\005\000" +
    "\002\026\010\000\002\026\011\000\002\026\012\000\002" +
    "\026\011\000\002\026\011\000\002\026\012\000\002\026" +
    "\013\000\002\026\012\000\002\062\012\000\002\062\011" +
    "\000\002\061\004\000\002\061\003\000\002\027\006\000" +
    "\002\027\005\000\002\045\020\000\002\045\017\000\002" +
    "\047\005\000\002\047\005\000\002\047\004\000\002\047" +
    "\006\000\002\046\003\000\002\046\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\037\006\000\002\037\007\000\002\040\005\000\002" +
    "\040\003\000\002\007\011\000\002\007\010\000\002\007" +
    "\010\000\002\007\007\000\002\035\011\000\002\035\010" +
    "\000\002\036\013\000\002\036\012\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\004\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\004\000\002\031\005\000\002\031" +
    "\005\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\020\004\017\005\016\027\011\030\013\031" +
    "\012\032\007\033\015\001\002\000\022\002\ufffc\004\ufffc" +
    "\005\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\001" +
    "\002\000\004\005\u0134\001\002\000\022\002\000\004\017" +
    "\005\016\027\011\030\013\031\012\032\007\033\015\001" +
    "\002\000\024\005\uff8e\006\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\070\uff8e\001\002\000\004\002" +
    "\u0132\001\002\000\024\005\uff91\006\uff91\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\017\uff91\020\uff91\070\uff91\001\002\000" +
    "\024\005\uff8f\006\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\070\uff8f\001\002\000\024\005\uff90\006" +
    "\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90" +
    "\070\uff90\001\002\000\022\002\ufffe\004\ufffe\005\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\001\002\000\024" +
    "\005\uff8d\006\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017" +
    "\uff8d\020\uff8d\070\uff8d\001\002\000\004\070\027\001\002" +
    "\000\004\070\021\001\002\000\022\002\ufffd\004\ufffd\005" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\001\002" +
    "\000\006\034\ufff8\035\ufff8\001\002\000\006\034\024\035" +
    "\023\001\002\000\022\002\ufffb\004\ufffb\005\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\033\ufffb\001\002\000\006\054" +
    "\025\070\026\001\002\000\006\034\ufff9\035\ufff9\001\002" +
    "\000\006\034\ufffa\035\ufffa\001\002\000\004\037\030\001" +
    "\002\000\036\006\033\013\044\014\037\015\032\016\045" +
    "\017\036\020\047\027\011\030\013\031\012\032\007\033" +
    "\015\040\046\070\043\001\002\000\022\002\ufff6\004\ufff6" +
    "\005\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\001" +
    "\002\000\004\070\uff8a\001\002\000\004\070\u0125\001\002" +
    "\000\036\006\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\040\ufff2\070\ufff2\001\002\000\036\006\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\032\ufff0\033\ufff0\040\ufff0\070\ufff0\001\002\000" +
    "\004\070\uff88\001\002\000\004\070\uff8b\001\002\000\004" +
    "\070\u0115\001\002\000\022\006\033\013\044\014\037\015" +
    "\032\016\045\017\036\020\047\070\043\001\002\000\036" +
    "\006\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\040\uffec" +
    "\070\uffec\001\002\000\004\041\053\001\002\000\004\070" +
    "\uff8c\001\002\000\004\070\uff89\001\002\000\022\002\ufff4" +
    "\004\ufff4\005\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\001\002\000\004\070\uff87\001\002\000\036\006\033" +
    "\013\044\014\037\015\032\016\045\017\036\020\047\027" +
    "\011\030\013\031\012\032\007\033\015\040\052\070\043" +
    "\001\002\000\036\006\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\040\ufff3\070\ufff3\001\002\000\022\002\ufff5\004" +
    "\ufff5\005\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\001\002\000\020\013\044\014\037\015\032\016\045\017" +
    "\036\020\047\042\055\001\002\000\004\070\u0110\001\002" +
    "\000\004\037\u010c\001\002\000\006\036\057\042\060\001" +
    "\002\000\016\013\044\014\037\015\032\016\045\017\036" +
    "\020\047\001\002\000\004\037\061\001\002\000\046\013" +
    "\044\014\037\015\032\016\045\017\036\020\047\021\076" +
    "\023\104\024\067\025\100\026\064\027\011\030\013\031" +
    "\012\032\007\033\015\040\102\070\075\001\002\000\056" +
    "\007\uffdb\010\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\040\uffdb\064" +
    "\uffdb\066\uffdb\070\uffdb\001\002\000\056\007\uffdd\010\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\040\uffdd\064\uffdd\066\uffdd\070" +
    "\uffdd\001\002\000\004\041\337\001\002\000\056\007\uffd9" +
    "\010\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\040\uffd9\064\uffd9\066" +
    "\uffd9\070\uffd9\001\002\000\056\007\uffde\010\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\040\uffde\064\uffde\066\uffde\070\uffde\001" +
    "\002\000\004\041\330\001\002\000\056\007\uffe2\010\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\040\uffe2\064\uffe2\066\uffe2\070" +
    "\uffe2\001\002\000\004\070\320\001\002\000\006\035\325" +
    "\036\322\001\002\000\016\013\044\014\037\015\032\016" +
    "\045\017\036\020\047\001\002\000\056\007\uffdc\010\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\040\uffdc\064\uffdc\066\uffdc\070" +
    "\uffdc\001\002\000\014\035\uffd3\036\uffd3\041\273\045\275" +
    "\070\276\001\002\000\004\041\237\001\002\000\056\007" +
    "\uffd8\010\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\040\uffd8\064\uffd8" +
    "\066\uffd8\070\uffd8\001\002\000\004\037\221\001\002\000" +
    "\056\007\uffda\010\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\040\uffda" +
    "\064\uffda\066\uffda\070\uffda\001\002\000\036\006\uff98\013" +
    "\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\040\uff98\070\uff98\001" +
    "\002\000\046\013\044\014\037\015\032\016\045\017\036" +
    "\020\047\021\076\023\104\024\067\025\100\026\064\027" +
    "\011\030\013\031\012\032\007\033\015\040\220\070\075" +
    "\001\002\000\004\041\105\001\002\000\016\013\044\014" +
    "\037\015\032\016\045\017\036\020\047\001\002\000\004" +
    "\070\107\001\002\000\004\045\110\001\002\000\022\011" +
    "\111\012\113\041\121\053\116\067\117\070\112\071\115" +
    "\072\114\001\002\000\044\035\uff7d\036\uff7d\042\uff7d\043" +
    "\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d" +
    "\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\061\uff7d\062" +
    "\uff7d\001\002\000\044\035\uff80\036\uff80\042\uff80\043\uff80" +
    "\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052" +
    "\uff80\053\uff80\054\uff80\055\uff80\056\uff80\061\uff80\062\uff80" +
    "\001\002\000\044\035\uff7c\036\uff7c\042\uff7c\043\uff7c\044" +
    "\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c" +
    "\053\uff7c\054\uff7c\055\uff7c\056\uff7c\061\uff7c\062\uff7c\001" +
    "\002\000\044\035\uff7f\036\uff7f\042\uff7f\043\uff7f\044\uff7f" +
    "\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\061\uff7f\062\uff7f\001\002" +
    "\000\044\035\uff7e\036\uff7e\042\uff7e\043\uff7e\044\uff7e\045" +
    "\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e" +
    "\054\uff7e\055\uff7e\056\uff7e\061\uff7e\062\uff7e\001\002\000" +
    "\022\011\111\012\113\041\121\053\116\067\117\070\112" +
    "\071\115\072\114\001\002\000\044\035\uff81\036\uff81\042" +
    "\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81" +
    "\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\061" +
    "\uff81\062\uff81\001\002\000\014\035\134\052\124\053\125" +
    "\054\123\055\127\001\002\000\022\011\111\012\113\041" +
    "\121\053\116\067\117\070\112\071\115\072\114\001\002" +
    "\000\014\042\126\052\124\053\125\054\123\055\127\001" +
    "\002\000\022\011\111\012\113\041\121\053\116\067\117" +
    "\070\112\071\115\072\114\001\002\000\022\011\111\012" +
    "\113\041\121\053\116\067\117\070\112\071\115\072\114" +
    "\001\002\000\022\011\111\012\113\041\121\053\116\067" +
    "\117\070\112\071\115\072\114\001\002\000\044\035\uff7b" +
    "\036\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047" +
    "\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b" +
    "\056\uff7b\061\uff7b\062\uff7b\001\002\000\022\011\111\012" +
    "\113\041\121\053\116\067\117\070\112\071\115\072\114" +
    "\001\002\000\044\035\uff83\036\uff83\042\uff83\043\uff83\044" +
    "\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83" +
    "\053\uff83\054\uff83\055\uff83\056\uff83\061\uff83\062\uff83\001" +
    "\002\000\044\035\uff85\036\uff85\042\uff85\043\uff85\044\uff85" +
    "\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053" +
    "\uff85\054\123\055\127\056\uff85\061\uff85\062\uff85\001\002" +
    "\000\044\035\uff86\036\uff86\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86" +
    "\054\123\055\127\056\uff86\061\uff86\062\uff86\001\002\000" +
    "\044\035\uff84\036\uff84\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054" +
    "\uff84\055\uff84\056\uff84\061\uff84\062\uff84\001\002\000\024" +
    "\011\111\012\113\041\140\053\116\063\135\067\117\070" +
    "\112\071\115\072\114\001\002\000\024\011\111\012\113" +
    "\041\140\053\116\063\135\067\117\070\112\071\115\072" +
    "\114\001\002\000\032\043\157\044\153\045\152\046\151" +
    "\047\156\050\154\051\150\052\124\053\125\054\123\055" +
    "\127\056\155\001\002\000\010\035\170\061\143\062\144" +
    "\001\002\000\024\011\111\012\113\041\140\053\116\063" +
    "\135\067\117\070\112\071\115\072\114\001\002\000\034" +
    "\042\126\043\157\044\153\045\152\046\151\047\156\050" +
    "\154\051\150\052\124\053\125\054\123\055\127\056\155" +
    "\001\002\000\010\042\145\061\143\062\144\001\002\000" +
    "\024\011\111\012\113\041\140\053\116\063\135\067\117" +
    "\070\112\071\115\072\114\001\002\000\024\011\111\012" +
    "\113\041\140\053\116\063\135\067\117\070\112\071\115" +
    "\072\114\001\002\000\012\035\uff6f\042\uff6f\061\uff6f\062" +
    "\uff6f\001\002\000\012\035\uff70\042\uff70\061\uff70\062\uff70" +
    "\001\002\000\012\035\uff71\042\uff71\061\uff71\062\uff71\001" +
    "\002\000\022\011\111\012\113\041\121\053\116\067\117" +
    "\070\112\071\115\072\114\001\002\000\022\011\111\012" +
    "\113\041\121\053\116\067\117\070\112\071\115\072\114" +
    "\001\002\000\022\011\111\012\113\041\121\053\116\067" +
    "\117\070\112\071\115\072\114\001\002\000\022\011\111" +
    "\012\113\041\121\053\116\067\117\070\112\071\115\072" +
    "\114\001\002\000\022\011\111\012\113\041\121\053\116" +
    "\067\117\070\112\071\115\072\114\001\002\000\022\011" +
    "\111\012\113\041\121\053\116\067\117\070\112\071\115" +
    "\072\114\001\002\000\022\011\111\012\113\041\121\053" +
    "\116\067\117\070\112\071\115\072\114\001\002\000\022" +
    "\011\111\012\113\041\121\053\116\067\117\070\112\071" +
    "\115\072\114\001\002\000\022\035\uff7a\042\uff7a\052\124" +
    "\053\125\054\123\055\127\061\uff7a\062\uff7a\001\002\000" +
    "\022\035\uff77\042\uff77\052\124\053\125\054\123\055\127" +
    "\061\uff77\062\uff77\001\002\000\022\035\uff73\042\uff73\052" +
    "\124\053\125\054\123\055\127\061\uff73\062\uff73\001\002" +
    "\000\022\035\uff75\042\uff75\052\124\053\125\054\123\055" +
    "\127\061\uff75\062\uff75\001\002\000\022\035\uff79\042\uff79" +
    "\052\124\053\125\054\123\055\127\061\uff79\062\uff79\001" +
    "\002\000\022\035\uff74\042\uff74\052\124\053\125\054\123" +
    "\055\127\061\uff74\062\uff74\001\002\000\022\035\uff78\042" +
    "\uff78\052\124\053\125\054\123\055\127\061\uff78\062\uff78" +
    "\001\002\000\022\035\uff76\042\uff76\052\124\053\125\054" +
    "\123\055\127\061\uff76\062\uff76\001\002\000\004\070\172" +
    "\001\002\000\004\042\210\001\002\000\020\045\175\052" +
    "\203\053\174\054\201\055\173\057\177\060\200\001\002" +
    "\000\004\045\uff9e\001\002\000\004\045\uffa0\001\002\000" +
    "\026\011\111\012\113\041\121\053\116\057\177\060\200" +
    "\067\117\070\112\071\115\072\114\001\002\000\004\045" +
    "\204\001\002\000\004\042\uffa3\001\002\000\004\042\uffa2" +
    "\001\002\000\004\045\uff9f\001\002\000\004\042\uffa5\001" +
    "\002\000\004\045\uffa1\001\002\000\022\011\111\012\113" +
    "\041\121\053\116\067\117\070\112\071\115\072\114\001" +
    "\002\000\014\042\uffa4\052\124\053\125\054\123\055\127" +
    "\001\002\000\014\042\uffa6\052\124\053\125\054\123\055" +
    "\127\001\002\000\004\042\uffa7\001\002\000\004\037\211" +
    "\001\002\000\046\013\044\014\037\015\032\016\045\017" +
    "\036\020\047\021\076\023\104\024\067\025\100\026\064" +
    "\027\011\030\013\031\012\032\007\033\015\040\212\070" +
    "\075\001\002\000\056\007\uffa8\010\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\040\uffa8\064\uffa8\066\uffa8\070\uffa8\001\002\000" +
    "\046\013\044\014\037\015\032\016\045\017\036\020\047" +
    "\021\076\023\104\024\067\025\100\026\064\027\011\030" +
    "\013\031\012\032\007\033\015\040\215\070\075\001\002" +
    "\000\056\007\uffe3\010\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\040" +
    "\uffe3\064\uffe3\066\uffe3\070\uffe3\001\002\000\056\007\uffa9" +
    "\010\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\033\uffa9\040\uffa9\064\uffa9\066" +
    "\uffa9\070\uffa9\001\002\000\012\035\uff72\042\uff72\061\uff72" +
    "\062\uff72\001\002\000\044\035\uff82\036\uff82\042\uff82\043" +
    "\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82" +
    "\052\uff82\053\uff82\054\123\055\127\056\uff82\061\uff82\062" +
    "\uff82\001\002\000\036\006\uff99\013\uff99\014\uff99\015\uff99" +
    "\016\uff99\017\uff99\020\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\040\uff99\070\uff99\001\002\000\046\013\044" +
    "\014\037\015\032\016\045\017\036\020\047\021\076\023" +
    "\104\024\067\025\100\026\064\027\011\030\013\031\012" +
    "\032\007\033\015\040\222\070\075\001\002\000\004\024" +
    "\232\001\002\000\046\013\044\014\037\015\032\016\045" +
    "\017\036\020\047\021\076\023\104\024\067\025\100\026" +
    "\064\027\011\030\013\031\012\032\007\033\015\040\224" +
    "\070\075\001\002\000\004\024\225\001\002\000\004\041" +
    "\226\001\002\000\024\011\111\012\113\041\140\053\116" +
    "\063\135\067\117\070\112\071\115\072\114\001\002\000" +
    "\010\042\230\061\143\062\144\001\002\000\004\035\231" +
    "\001\002\000\056\007\uff93\010\uff93\013\uff93\014\uff93\015" +
    "\uff93\016\uff93\017\uff93\020\uff93\021\uff93\023\uff93\024\uff93" +
    "\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033" +
    "\uff93\040\uff93\064\uff93\066\uff93\070\uff93\001\002\000\004" +
    "\041\233\001\002\000\024\011\111\012\113\041\140\053" +
    "\116\063\135\067\117\070\112\071\115\072\114\001\002" +
    "\000\010\042\235\061\143\062\144\001\002\000\004\035" +
    "\236\001\002\000\056\007\uff92\010\uff92\013\uff92\014\uff92" +
    "\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\023\uff92\024" +
    "\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\040\uff92\064\uff92\066\uff92\070\uff92\001\002\000" +
    "\024\011\111\012\113\041\140\053\116\063\135\067\117" +
    "\070\112\071\115\072\114\001\002\000\010\042\241\061" +
    "\143\062\144\001\002\000\004\037\242\001\002\000\046" +
    "\013\044\014\037\015\032\016\045\017\036\020\047\021" +
    "\076\023\104\024\067\025\100\026\064\027\011\030\013" +
    "\031\012\032\007\033\015\040\243\070\075\001\002\000" +
    "\060\007\uffb7\010\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\251\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\040\uffb7\064\uffb7\066\uffb7\070\uffb7\001\002\000\046\013" +
    "\044\014\037\015\032\016\045\017\036\020\047\021\076" +
    "\023\104\024\067\025\100\026\064\027\011\030\013\031" +
    "\012\032\007\033\015\040\245\070\075\001\002\000\060" +
    "\007\uffb3\010\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\251\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\040" +
    "\uffb3\064\uffb3\066\uffb3\070\uffb3\001\002\000\060\007\uffac" +
    "\010\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\040\uffac\064" +
    "\uffac\066\uffac\070\uffac\001\002\000\056\007\uffb0\010\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\040\uffb0\064\uffb0\066\uffb0\070" +
    "\uffb0\001\002\000\060\007\uffb2\010\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\251\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\040\uffb2\064\uffb2\066\uffb2\070\uffb2\001" +
    "\002\000\006\021\252\037\253\001\002\000\004\041\257" +
    "\001\002\000\046\013\044\014\037\015\032\016\045\017" +
    "\036\020\047\021\076\023\104\024\067\025\100\026\064" +
    "\027\011\030\013\031\012\032\007\033\015\040\254\070" +
    "\075\001\002\000\056\007\uffaa\010\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\040\uffaa\064\uffaa\066\uffaa\070\uffaa\001\002\000" +
    "\046\013\044\014\037\015\032\016\045\017\036\020\047" +
    "\021\076\023\104\024\067\025\100\026\064\027\011\030" +
    "\013\031\012\032\007\033\015\040\256\070\075\001\002" +
    "\000\056\007\uffab\010\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\023\uffab\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\040" +
    "\uffab\064\uffab\066\uffab\070\uffab\001\002\000\024\011\111" +
    "\012\113\041\140\053\116\063\135\067\117\070\112\071" +
    "\115\072\114\001\002\000\010\042\261\061\143\062\144" +
    "\001\002\000\004\037\262\001\002\000\046\013\044\014" +
    "\037\015\032\016\045\017\036\020\047\021\076\023\104" +
    "\024\067\025\100\026\064\027\011\030\013\031\012\032" +
    "\007\033\015\040\263\070\075\001\002\000\060\007\uffae" +
    "\010\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\040\uffae\064" +
    "\uffae\066\uffae\070\uffae\001\002\000\046\013\044\014\037" +
    "\015\032\016\045\017\036\020\047\021\076\023\104\024" +
    "\067\025\100\026\064\027\011\030\013\031\012\032\007" +
    "\033\015\040\265\070\075\001\002\000\060\007\uffaf\010" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\040\uffaf\064\uffaf" +
    "\066\uffaf\070\uffaf\001\002\000\060\007\uffad\010\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\040\uffad\064\uffad\066\uffad" +
    "\070\uffad\001\002\000\056\007\uffb1\010\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\040\uffb1\064\uffb1\066\uffb1\070\uffb1\001\002" +
    "\000\056\007\uffb4\010\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\040" +
    "\uffb4\064\uffb4\066\uffb4\070\uffb4\001\002\000\060\007\uffb6" +
    "\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\251\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\040\uffb6\064" +
    "\uffb6\066\uffb6\070\uffb6\001\002\000\056\007\uffb5\010\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\040\uffb5\064\uffb5\066\uffb5\070" +
    "\uffb5\001\002\000\006\042\307\070\310\001\002\000\006" +
    "\035\uffd2\036\uffd2\001\002\000\022\011\111\012\113\041" +
    "\121\053\116\067\117\070\112\071\115\072\114\001\002" +
    "\000\004\045\277\001\002\000\004\070\300\001\002\000" +
    "\004\070\301\001\002\000\004\041\302\001\002\000\004" +
    "\042\303\001\002\000\004\035\304\001\002\000\056\007" +
    "\uffd0\010\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\040\uffd0\064\uffd0" +
    "\066\uffd0\070\uffd0\001\002\000\016\035\uffd1\036\uffd1\052" +
    "\124\053\125\054\123\055\127\001\002\000\006\036\312" +
    "\042\313\001\002\000\004\035\311\001\002\000\006\036" +
    "\uff9a\042\uff9a\001\002\000\056\007\uff9d\010\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\040\uff9d\064\uff9d\066\uff9d\070\uff9d\001" +
    "\002\000\004\070\315\001\002\000\004\035\314\001\002" +
    "\000\056\007\uff9c\010\uff9c\013\uff9c\014\uff9c\015\uff9c\016" +
    "\uff9c\017\uff9c\020\uff9c\021\uff9c\023\uff9c\024\uff9c\025\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\040" +
    "\uff9c\064\uff9c\066\uff9c\070\uff9c\001\002\000\006\036\uff9b" +
    "\042\uff9b\001\002\000\004\070\320\001\002\000\006\035" +
    "\321\036\322\001\002\000\010\035\uffd3\036\uffd3\045\275" +
    "\001\002\000\056\007\uffe1\010\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\040\uffe1\064\uffe1\066\uffe1\070\uffe1\001\002\000\004" +
    "\070\323\001\002\000\010\035\uffd5\036\uffd5\045\275\001" +
    "\002\000\006\035\uffd4\036\uffd4\001\002\000\056\007\uffdf" +
    "\010\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\040\uffdf\064\uffdf\066" +
    "\uffdf\070\uffdf\001\002\000\006\035\327\036\322\001\002" +
    "\000\056\007\uffe0\010\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\040" +
    "\uffe0\064\uffe0\066\uffe0\070\uffe0\001\002\000\024\011\111" +
    "\012\113\041\140\053\116\063\135\067\117\070\112\071" +
    "\115\072\114\001\002\000\010\042\332\061\143\062\144" +
    "\001\002\000\004\037\333\001\002\000\046\013\044\014" +
    "\037\015\032\016\045\017\036\020\047\021\076\023\104" +
    "\024\067\025\100\026\064\027\011\030\013\031\012\032" +
    "\007\033\015\040\334\070\075\001\002\000\056\007\uff94" +
    "\010\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020" +
    "\uff94\021\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\040\uff94\064\uff94\066" +
    "\uff94\070\uff94\001\002\000\046\013\044\014\037\015\032" +
    "\016\045\017\036\020\047\021\076\023\104\024\067\025" +
    "\100\026\064\027\011\030\013\031\012\032\007\033\015" +
    "\040\336\070\075\001\002\000\056\007\uff95\010\uff95\013" +
    "\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95" +
    "\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\040\uff95\064\uff95\066\uff95\070\uff95" +
    "\001\002\000\024\011\111\012\113\041\140\053\116\063" +
    "\135\067\342\070\340\071\341\072\114\001\002\000\034" +
    "\042\uffbe\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80" +
    "\001\002\000\034\042\uffbc\043\uff7e\044\uff7e\045\uff7e\046" +
    "\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e" +
    "\055\uff7e\056\uff7e\001\002\000\034\042\uffbd\043\uff81\044" +
    "\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81" +
    "\053\uff81\054\uff81\055\uff81\056\uff81\001\002\000\004\042" +
    "\uffcc\001\002\000\004\042\346\001\002\000\010\042\uffcd" +
    "\061\143\062\144\001\002\000\004\037\347\001\002\000" +
    "\004\064\352\001\002\000\010\040\uffca\064\uffca\066\uffca" +
    "\001\002\000\010\040\u0102\064\352\066\u0104\001\002\000" +
    "\014\067\356\070\361\071\353\072\355\073\360\001\002" +
    "\000\006\065\uffbc\073\uffbc\001\002\000\004\065\uffbf\001" +
    "\002\000\004\065\uffc0\001\002\000\006\065\uffbd\073\uffbd" +
    "\001\002\000\004\065\364\001\002\000\010\067\356\070" +
    "\361\071\353\001\002\000\006\065\uffbe\073\uffbe\001\002" +
    "\000\004\073\363\001\002\000\004\065\uffc1\001\002\000" +
    "\056\007\370\010\366\013\044\014\037\015\032\016\045" +
    "\017\036\020\047\021\076\023\104\024\067\025\100\026" +
    "\064\027\011\030\013\031\012\032\007\033\015\040\uffc7" +
    "\064\uffc7\066\uffc7\070\075\001\002\000\010\040\uffc6\064" +
    "\uffc6\066\uffc6\001\002\000\006\035\373\070\374\001\002" +
    "\000\056\007\370\010\366\013\044\014\037\015\032\016" +
    "\045\017\036\020\047\021\076\023\104\024\067\025\100" +
    "\026\064\027\011\030\013\031\012\032\007\033\015\040" +
    "\uffc9\064\uffc9\066\uffc9\070\075\001\002\000\004\035\371" +
    "\001\002\000\010\040\uffc5\064\uffc5\066\uffc5\001\002\000" +
    "\010\040\uffc8\064\uffc8\066\uffc8\001\002\000\010\040\uffc4" +
    "\064\uffc4\066\uffc4\001\002\000\006\035\375\045\376\001" +
    "\002\000\010\040\uffc2\064\uffc2\066\uffc2\001\002\000\022" +
    "\011\111\012\113\041\121\053\116\067\117\070\112\071" +
    "\115\072\114\001\002\000\014\035\u0100\052\124\053\125" +
    "\054\123\055\127\001\002\000\010\040\uffc3\064\uffc3\066" +
    "\uffc3\001\002\000\004\040\u0109\001\002\000\056\007\uffce" +
    "\010\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\040\uffce\064\uffce\066" +
    "\uffce\070\uffce\001\002\000\010\040\uffcb\064\uffcb\066\uffcb" +
    "\001\002\000\004\065\u0105\001\002\000\052\007\370\010" +
    "\366\013\044\014\037\015\032\016\045\017\036\020\047" +
    "\021\076\023\104\024\067\025\100\026\064\027\011\030" +
    "\013\031\012\032\007\033\015\040\uffb9\070\075\001\002" +
    "\000\004\040\uffb8\001\002\000\052\007\370\010\366\013" +
    "\044\014\037\015\032\016\045\017\036\020\047\021\076" +
    "\023\104\024\067\025\100\026\064\027\011\030\013\031" +
    "\012\032\007\033\015\040\uffbb\070\075\001\002\000\004" +
    "\040\uffba\001\002\000\056\007\uffcf\010\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\040\uffcf\064\uffcf\066\uffcf\070\uffcf\001\002" +
    "\000\004\070\u010b\001\002\000\006\036\uffd7\042\uffd7\001" +
    "\002\000\046\013\044\014\037\015\032\016\045\017\036" +
    "\020\047\021\076\023\104\024\067\025\100\026\064\027" +
    "\011\030\013\031\012\032\007\033\015\040\u010d\070\075" +
    "\001\002\000\036\006\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\027\uff96\030\uff96\031\uff96\032\uff96" +
    "\033\uff96\040\uff96\070\uff96\001\002\000\046\013\044\014" +
    "\037\015\032\016\045\017\036\020\047\021\076\023\104" +
    "\024\067\025\100\026\064\027\011\030\013\031\012\032" +
    "\007\033\015\040\u010f\070\075\001\002\000\036\006\uff97" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\027" +
    "\uff97\030\uff97\031\uff97\032\uff97\033\uff97\040\uff97\070\uff97" +
    "\001\002\000\006\036\uffd6\042\uffd6\001\002\000\004\070" +
    "\u0115\001\002\000\036\006\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\040\ufff1\070\ufff1\001\002\000\036\006\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\040\uffed\070\uffed" +
    "\001\002\000\006\035\u0122\036\322\001\002\000\012\035" +
    "\uffd3\036\uffd3\041\u0116\045\275\001\002\000\020\013\044" +
    "\014\037\015\032\016\045\017\036\020\047\042\u0117\001" +
    "\002\000\004\037\u011e\001\002\000\006\036\057\042\u0119" +
    "\001\002\000\004\037\u011a\001\002\000\046\013\044\014" +
    "\037\015\032\016\045\017\036\020\047\021\076\023\104" +
    "\024\067\025\100\026\064\027\011\030\013\031\012\032" +
    "\007\033\015\040\u011b\070\075\001\002\000\036\006\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\040\uffe5\070\uffe5" +
    "\001\002\000\046\013\044\014\037\015\032\016\045\017" +
    "\036\020\047\021\076\023\104\024\067\025\100\026\064" +
    "\027\011\030\013\031\012\032\007\033\015\040\u011d\070" +
    "\075\001\002\000\036\006\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\040\uffe4\070\uffe4\001\002\000\046\013\044" +
    "\014\037\015\032\016\045\017\036\020\047\021\076\023" +
    "\104\024\067\025\100\026\064\027\011\030\013\031\012" +
    "\032\007\033\015\040\u011f\070\075\001\002\000\036\006" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\040\uffe7\070" +
    "\uffe7\001\002\000\046\013\044\014\037\015\032\016\045" +
    "\017\036\020\047\021\076\023\104\024\067\025\100\026" +
    "\064\027\011\030\013\031\012\032\007\033\015\040\u0121" +
    "\070\075\001\002\000\036\006\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\040\uffe6\070\uffe6\001\002\000\036\006" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\040\uffef\070" +
    "\uffef\001\002\000\006\035\u0124\036\322\001\002\000\036" +
    "\006\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\040\uffee" +
    "\070\uffee\001\002\000\004\041\u0126\001\002\000\020\013" +
    "\044\014\037\015\032\016\045\017\036\020\047\042\u0127" +
    "\001\002\000\004\037\u012e\001\002\000\006\036\057\042" +
    "\u0129\001\002\000\004\037\u012a\001\002\000\046\013\044" +
    "\014\037\015\032\016\045\017\036\020\047\021\076\023" +
    "\104\024\067\025\100\026\064\027\011\030\013\031\012" +
    "\032\007\033\015\040\u012b\070\075\001\002\000\036\006" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\040\uffe9\070" +
    "\uffe9\001\002\000\046\013\044\014\037\015\032\016\045" +
    "\017\036\020\047\021\076\023\104\024\067\025\100\026" +
    "\064\027\011\030\013\031\012\032\007\033\015\040\u012d" +
    "\070\075\001\002\000\036\006\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\040\uffe8\070\uffe8\001\002\000\046\013" +
    "\044\014\037\015\032\016\045\017\036\020\047\021\076" +
    "\023\104\024\067\025\100\026\064\027\011\030\013\031" +
    "\012\032\007\033\015\040\u012f\070\075\001\002\000\036" +
    "\006\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\040\uffeb" +
    "\070\uffeb\001\002\000\046\013\044\014\037\015\032\016" +
    "\045\017\036\020\047\021\076\023\104\024\067\025\100" +
    "\026\064\027\011\030\013\031\012\032\007\033\015\040" +
    "\u0131\070\075\001\002\000\036\006\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\040\uffea\070\uffea\001\002\000\004" +
    "\002\001\001\002\000\022\002\uffff\004\uffff\005\uffff\027" +
    "\uffff\030\uffff\031\uffff\032\uffff\033\uffff\001\002\000\004" +
    "\070\u0135\001\002\000\004\037\030\001\002\000\022\002" +
    "\ufff7\004\ufff7\005\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\016\002\007\004\005\005\017\012\003\015" +
    "\004\044\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\017\012\003\015\004\044\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\030\001\001\000\016\007\041\014\047\015" +
    "\040\020\037\022\034\043\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u0122\001\001\000\010\007\u0112\020\u0110\022\u0111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\041\015\040\020\037\022\034\043\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\055\020" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0109\001\001\000\002\001\001\000" +
    "\032\015\072\020\070\023\102\024\071\026\065\030\076" +
    "\035\062\036\073\037\061\042\067\045\100\051\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\325\001\001\000\002\001\001" +
    "\000\004\020\315\001\001\000\002\001\001\000\004\025" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\015" +
    "\072\020\070\024\071\026\065\030\076\035\062\036\073" +
    "\037\061\042\213\045\100\051\064\001\001\000\002\001" +
    "\001\000\004\020\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\121\001\001\000\002\001\001" +
    "\000\004\032\132\001\001\000\004\032\131\001\001\000" +
    "\004\032\130\001\001\000\002\001\001\000\004\032\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\136\032\135\001\001" +
    "\000\006\031\215\032\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\141\032\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\146\032\135\001" +
    "\001\000\006\031\145\032\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\166\001" +
    "\001\000\004\032\165\001\001\000\004\032\164\001\001" +
    "\000\004\032\163\001\001\000\004\032\162\001\001\000" +
    "\004\032\161\001\001\000\004\032\160\001\001\000\004" +
    "\032\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\170\001\001\000\002\001\001\000\006\046\201\050\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\205\046\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\015\072\020\070\023\212\024\071\026\065\030\076" +
    "\035\062\036\073\037\061\042\067\045\100\051\064\001" +
    "\001\000\002\001\001\000\030\015\072\020\070\024\071" +
    "\026\065\030\076\035\062\036\073\037\061\042\213\045" +
    "\100\051\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\015\072\020\070\023\222\024\071\026\065\030\076" +
    "\035\062\036\073\037\061\042\067\045\100\051\064\001" +
    "\001\000\002\001\001\000\030\015\072\020\070\024\071" +
    "\026\065\030\076\035\062\036\073\037\061\042\213\045" +
    "\100\051\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\226\032\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\233\032\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\237\032\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\015\072\020" +
    "\070\023\243\024\071\026\065\030\076\035\062\036\073" +
    "\037\061\042\067\045\100\051\064\001\001\000\010\027" +
    "\267\061\270\062\245\001\001\000\030\015\072\020\070" +
    "\024\071\026\065\030\076\035\062\036\073\037\061\042" +
    "\213\045\100\051\064\001\001\000\010\027\246\061\247" +
    "\062\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\266\062\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\015\072\020\070\023\254\024\071\026" +
    "\065\030\076\035\062\036\073\037\061\042\067\045\100" +
    "\051\064\001\001\000\002\001\001\000\030\015\072\020" +
    "\070\024\071\026\065\030\076\035\062\036\073\037\061" +
    "\042\213\045\100\051\064\001\001\000\002\001\001\000" +
    "\006\031\257\032\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\015\072\020\070\023\263\024\071\026" +
    "\065\030\076\035\062\036\073\037\061\042\067\045\100" +
    "\051\064\001\001\000\002\001\001\000\030\015\072\020" +
    "\070\024\071\026\065\030\076\035\062\036\073\037\061" +
    "\042\213\045\100\051\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\271\062\265\001\001\000\002\001\001\000\004\040" +
    "\305\001\001\000\002\001\001\000\004\032\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\316\001\001\000\002\001\001\000\004\025\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\323\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\330\032\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\015\072" +
    "\020\070\023\334\024\071\026\065\030\076\035\062\036" +
    "\073\037\061\042\067\045\100\051\064\001\001\000\002" +
    "\001\001\000\030\015\072\020\070\024\071\026\065\030" +
    "\076\035\062\036\073\037\061\042\213\045\100\051\064" +
    "\001\001\000\002\001\001\000\012\010\343\031\344\032" +
    "\135\055\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\350\053\347" +
    "\001\001\000\002\001\001\000\006\053\u0102\054\u0100\001" +
    "\001\000\006\055\353\056\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\361\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\015\072\020" +
    "\070\023\366\024\071\026\065\030\076\035\062\036\073" +
    "\037\061\042\067\045\100\051\064\060\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\015\072\020\070" +
    "\024\071\026\065\030\076\035\062\036\073\037\061\042" +
    "\213\045\100\051\064\060\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\015\072\020\070\023\u0106\024\071\026\065\030\076\035" +
    "\062\036\073\037\061\042\067\045\100\051\064\060\u0105" +
    "\001\001\000\002\001\001\000\032\015\072\020\070\024" +
    "\071\026\065\030\076\035\062\036\073\037\061\042\213" +
    "\045\100\051\064\060\u0107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\015\072\020\070\023\u010d\024\071\026\065\030\076\035" +
    "\062\036\073\037\061\042\067\045\100\051\064\001\001" +
    "\000\002\001\001\000\030\015\072\020\070\024\071\026" +
    "\065\030\076\035\062\036\073\037\061\042\213\045\100" +
    "\051\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u0113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\273\001\001\000\006\017" +
    "\u0117\020\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\015\072\020\070\023\u011b\024" +
    "\071\026\065\030\076\035\062\036\073\037\061\042\067" +
    "\045\100\051\064\001\001\000\002\001\001\000\030\015" +
    "\072\020\070\024\071\026\065\030\076\035\062\036\073" +
    "\037\061\042\213\045\100\051\064\001\001\000\002\001" +
    "\001\000\032\015\072\020\070\023\u011f\024\071\026\065" +
    "\030\076\035\062\036\073\037\061\042\067\045\100\051" +
    "\064\001\001\000\002\001\001\000\030\015\072\020\070" +
    "\024\071\026\065\030\076\035\062\036\073\037\061\042" +
    "\213\045\100\051\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\u0127\020\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\015\072\020" +
    "\070\023\u012b\024\071\026\065\030\076\035\062\036\073" +
    "\037\061\042\067\045\100\051\064\001\001\000\002\001" +
    "\001\000\030\015\072\020\070\024\071\026\065\030\076" +
    "\035\062\036\073\037\061\042\213\045\100\051\064\001" +
    "\001\000\002\001\001\000\032\015\072\020\070\023\u012f" +
    "\024\071\026\065\030\076\035\062\036\073\037\061\042" +
    "\067\045\100\051\064\001\001\000\002\001\001\000\030" +
    "\015\072\020\070\024\071\026\065\030\076\035\062\036" +
    "\073\037\061\042\213\045\100\051\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0135\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    ArrayList<Metodo> misMetodos=new ArrayList<Metodo>();
    ArrayList<Funcion> misFunciones=new ArrayList<Funcion>();
    ArrayList<Variable> nuevo=new ArrayList<Variable>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }
    
    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    public ArrayList<Variable> almacenar_variables(Object var,Object vis,Object tipo, Object e){
        System.out.println(var+" h i"+vis+" "+tipo);
        String vars= String.valueOf(var);
        String variables[]=vars.split(",");
        
        if(vis!=null){
            for(int i=0; i<=variables.length-1; i++){
                System.out.println(i);     
                Variable temp=new Variable(vis.toString(),tipo.toString(),variables[i],"");
                System.out.println("Cualquier cosa");
                nuevo.add(temp);
            }
        }else{
            for(int i=0; i<=variables.length-1; i++){
                System.out.println(tipo.toString()+variables[i]);
                Variable temp=new Variable(tipo.toString(),variables[i],"");
                nuevo.add(temp);
            }
        }
        System.out.println("sillegas");
        return nuevo;  
    }

    public ArrayList<Metodo> almacenar_metodos(Object tipo_dato, Object id, Object parametro, ArrayList<Variable> arrayvars){
         String temp="";
         ArrayList<Parametro> misParametros=new ArrayList<Parametro>();
         String param= String.valueOf(parametro);
         System.out.println("Estos son todos parametros de la funcion " + parametro);
         
        if (param.equals("null")){
            Metodo miMetodo = new Metodo(tipo_dato.toString(), id.toString(), null,arrayvars);
            misMetodos.add(miMetodo);
            return misMetodos;
        }else{
            for(int i=0; i<param.length(); i++){
             char c = param.charAt(i); 
             if(c=='$'){
                temp="$";
                break;
             }else{
                temp="";
            }
         }
         
         if(temp.equals("$")){
            String variables[]=param.split("\\$");
            String[] splitdos = null;
            for(int i=0; i<variables.length; i++){
                 splitdos=variables[i].split("\\&");
                 Parametro misParam = new Parametro(splitdos[0], splitdos[1]);
                 misParametros.add(misParam);
                 System.out.println(splitdos[0]);
                 System.out.println(splitdos[1]+"\n");
            }
            
            Metodo miMetodo = new Metodo(tipo_dato.toString(), id.toString(), misParametros,arrayvars);
            misMetodos.add(miMetodo);
            return misMetodos;

         }else{
            String vars[]=param.split("\\&");
            System.out.println("jeje"+vars[0]);
            System.out.println("jeje"+vars[1]);
            
            Parametro misParam = new Parametro(vars[0], vars[1]);
            misParametros.add(misParam);
            
            Metodo miMetodo = new Metodo(tipo_dato.toString(), id.toString(), misParametros,arrayvars);
            misMetodos.add(miMetodo);
            return misMetodos;
         }
        }

        
    }

    public ArrayList<Funcion> almacenar_funciones(Object tipo_dato, Object id, Object parametro,ArrayList<Variable> arrayvars){
         String temp="";
         ArrayList<Parametro> misParametros=new ArrayList<Parametro>();
         String param= String.valueOf(parametro);
         System.out.println("Estos son todos parametros de la funcion " + parametro);
         
         if(param.equals("null")){
            Funcion miFuncion = new Funcion(tipo_dato.toString(), id.toString(), null,arrayvars);
            misFunciones.add(miFuncion);
            return misFunciones;
         }else{
            for(int i=0; i<param.length(); i++){
             char c = param.charAt(i); 
             if(c=='$'){
                temp="$";
                break;
             }else{
                temp="";
            }
         }
         
         if(temp.equals("$")){
            String variables[]=param.split("\\$");
            String[] splitdos = null;
            for(int i=0; i<variables.length; i++){
                 splitdos=variables[i].split("\\&");
                 Parametro misParam = new Parametro(splitdos[0], splitdos[1]);
                 misParametros.add(misParam);
                 System.out.println(splitdos[0]);
                 System.out.println(splitdos[1]+"\n");
            }
            
            Funcion miFuncion = new Funcion(tipo_dato.toString(), id.toString(), misParametros,arrayvars);
            misFunciones.add(miFuncion);
            return misFunciones;

         }else{
            String vars[]=param.split("\\&");
            System.out.println("jeje"+vars[0]);
            System.out.println("jeje"+vars[1]);
            
            Parametro misParam = new Parametro(vars[0], vars[1]);
            misParametros.add(misParam);
            
            Funcion miFuncion = new Funcion(tipo_dato.toString(), id.toString(), misParametros,arrayvars);
            misFunciones.add(miFuncion);
            return misFunciones;
         }
         }

        
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PRINCIPALES 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              RESULT=p;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRINCIPALES ::= PRINCIPALES PRINCIPALES1 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   RESULT=p1;
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRINCIPALES ::= PRINCIPALES1 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   RESULT=p1;
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PRINCIPALES1 ::= IMPORT 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES1",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PRINCIPALES1 ::= CLASP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  RESULT=c;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES1",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= iimport IMPORTS1 ptoYcoma 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTS1 ::= IMPORTS1 pto id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTS1 ::= IMPORTS1 pto por 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTS1 ::= id 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASP ::= VISIBILIDAD claass id CUERPO_CLASE 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		         
              RESULT=cc;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASP ::= claass id CUERPO_CLASE 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              RESULT=cc;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_CLASE ::= llavea DECLARACIONES_CLASE llavec 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=dc;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_CLASE ::= llavea llavec 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE DECLARACIONES_CLASE1 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dc1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dc1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dc1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=dc1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE1 
            {
              Object RESULT =null;
		int dc1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dc1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dc1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=dc1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES_CLASE1 ::= VISIBILIDAD MET_FUNC 
            {
              Object RESULT =null;
		int met_funleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int met_funright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object met_fun = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                             RESULT=met_fun;
                           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES_CLASE1 ::= MET_FUNC 
            {
              Object RESULT =null;
		int met_funleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int met_funright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object met_fun = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                             RESULT=met_fun;
                           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES_CLASE1 ::= VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object vis = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                             System.out.println("Variable con vis");
                             ArrayList<Variable> nuevo = almacenar_variables(var,vis,tipo,null);
                             System.out.println("variable con tipo");
                             RESULT=nuevo; 
                           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES_CLASE1 ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                             System.out.println("variable sin vis");
                             ArrayList<Variable> nuevo = almacenar_variables(var,null,tipo,null);
                             System.out.println("variable sin vis1 "+tipo.toString()+" "+var.toString());
                             RESULT=nuevo; 
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES_CLASE1 ::= VISIBILIDAD CONSTRUCTOR 
            {
              Object RESULT =null;
		
                             RESULT="";
                             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACIONES_CLASE1 ::= CONSTRUCTOR 
            {
              Object RESULT =null;
		
                             RESULT="";
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MET_FUNC ::= voiid id para parc llavea llavec 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 
                   nuevo=new ArrayList<Variable>();
                   ArrayList<Metodo> newMetodo=almacenar_metodos(v,i,null,null);
                   RESULT=newMetodo;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MET_FUNC ::= voiid id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                   if(cf!=""){
                   nuevo=new ArrayList<Variable>();
                   ArrayList cf1 = (ArrayList) cf; //Casteo de object a arrayList
                   ArrayList<Metodo> newMetodo=almacenar_metodos(v,i,null,cf1);
                   RESULT=newMetodo;
                   }else{
                   ArrayList<Metodo> newMetodo=almacenar_metodos(v,i,null,null);
                   RESULT=newMetodo;
                   }
                  
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MET_FUNC ::= voiid id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 
                   nuevo=new ArrayList<Variable>();
                   ArrayList<Metodo> newMetodo=almacenar_metodos(v,i,param,null);
                   RESULT=newMetodo;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MET_FUNC ::= voiid id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                  if(cf!=""){
                    nuevo=new ArrayList<Variable>();
                    ArrayList cf1 = (ArrayList) cf; //Casteo de object a arrayList
                    ArrayList<Metodo> newMetodo=almacenar_metodos(v,i,param,cf1);
                    RESULT=newMetodo;
                  }else{
                    ArrayList<Metodo> newMetodo=almacenar_metodos(v,i,param,null);
                    RESULT=newMetodo;
                  }
                 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MET_FUNC ::= TIPODATOS id para parc llavea llavec 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                   nuevo=new ArrayList<Variable>();
                   ArrayList<Funcion> newFuncion=almacenar_funciones(v,i,null,null);
                   RESULT=newFuncion;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MET_FUNC ::= TIPODATOS id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    nuevo=new ArrayList<Variable>();
                    ArrayList cf1 = (ArrayList) cf; //Casteo de object a arrayList 
                    ArrayList<Funcion> newFuncion=almacenar_funciones(v,i,null,cf1);
                    RESULT=newFuncion;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MET_FUNC ::= TIPODATOS id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                   nuevo=new ArrayList<Variable>();
                   ArrayList<Funcion> newFuncion=almacenar_funciones(v,i,param,null);
                   RESULT=newFuncion;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MET_FUNC ::= TIPODATOS id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                   nuevo=new ArrayList<Variable>();
                   ArrayList cf1 = (ArrayList) cf; //Casteo de object a arrayList
                   ArrayList<Funcion> newFuncion=almacenar_funciones(v,i,param,cf1);
                   RESULT=newFuncion;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES CUERPO_FUNCIONES1 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cf1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cf1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                         // RESULT=cf.toString()+cf1.toString();
                            RESULT=cf1;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES1 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                          RESULT=cf;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_FUNCIONES1 ::= VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object vis = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println(vis.toString()+" "+var.toString());
                          ArrayList<Variable> nuevo = almacenar_variables(var,vis,tipo,null);
                          System.out.println("variable con tipo");
                          RESULT=nuevo; 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_FUNCIONES1 ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println(var.toString());
                          ArrayList<Variable> nuevo = almacenar_variables(var,null,tipo,null);
                          System.out.println("variable con tipo");
                          RESULT=nuevo; 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_FUNCIONES1 ::= VARIABLES ptoYcoma 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                          RESULT="";
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_FUNCIONES1 ::= IF 
            {
              Object RESULT =null;
		
                          RESULT="";
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_FUNCIONES1 ::= WHILE 
            {
              Object RESULT =null;
		
                          RESULT="";
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_FUNCIONES1 ::= DO_WHILE 
            {
              Object RESULT =null;
		
                          RESULT="";
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO_FUNCIONES1 ::= LLAMADA_FUNCIONES 
            {
              Object RESULT =null;
		
                          RESULT="";
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO_FUNCIONES1 ::= FOR 
            {
              Object RESULT =null;
		
                          RESULT="";
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO_FUNCIONES1 ::= SWITCH 
            {
              Object RESULT =null;
		
                          RESULT="";
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPO_FUNCIONES1 ::= INSTANCIA 
            {
              Object RESULT =null;
		
                          RESULT="";
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETROS ::= PARAMETROS coma TIPODATOS id 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		String temp =param+"$$"+tipo+"&&"+id;
                      RESULT=param+"$"+tipo+"&"+id;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETROS ::= TIPODATOS id 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		String temp=tipo+"&&"+id;
                      RESULT=temp=tipo+"&"+id;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARIABLES ::= VARIABLES coma id 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=vars+","+id;
                 System.out.println("VARS1");
                 System.out.println(vars + " " + id);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARIABLES ::= VARIABLES coma id ASIGNACION_VAR 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                 System.out.println("VARS2");
                 System.out.println(vars + " " + id);
                 RESULT=vars+","+id;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARIABLES ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id;
                 System.out.println("VARS3");
                 System.out.println(id);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARIABLES ::= id ASIGNACION_VAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		   System.out.println("VARS4");
                    System.out.println(id + " " + asign +"VARS4" );
                    RESULT=id;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION_VAR ::= asignacion EXPR 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=expr;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTANCIA ::= id id asignacion id id para parc ptoYcoma 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SWITCH ::= swiitch para COND_SW parc llavea CASE DEFAULT llavec 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SWITCH ::= swiitch para COND_SW parc llavea CASE llavec 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND_SW ::= CONDICION 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_SW",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND_SW ::= VALORES1 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_SW",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASE ::= CASE CASE1 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASE ::= CASE1 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASE1 ::= casee VALORES dosPtos CUERPO_FUNCIONES 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASE1 ::= casee VALORES dosPtos CUERPO_FUNCIONES BREAK_RETURN 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASE1 ::= casee VALORES dosPtos 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASE1 ::= casee VALORES dosPtos BREAK_RETURN 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BREAK_RETURN ::= breeak ptoYcoma 
            {
              Object RESULT =null;
		
                    RESULT="";
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK_RETURN",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BREAK_RETURN ::= retuurn ptoYcoma 
            {
              Object RESULT =null;
		
                    RESULT="";
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK_RETURN",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BREAK_RETURN ::= retuurn id asignacion EXPR ptoYcoma 
            {
              Object RESULT =null;
		
                    RESULT="";
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK_RETURN",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BREAK_RETURN ::= retuurn id ptoYcoma 
            {
              Object RESULT =null;
		
                    RESULT="";
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK_RETURN",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALORES ::= comilla VALORES1 comilla 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALORES ::= cadena 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALORES ::= VALORES1 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORES1 ::= id 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES1",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES1 ::= num 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES1",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES1 ::= decimal 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES1",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DEFAULT ::= defauult dosPtos CUERPO_FUNCIONES 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DEFAULT ::= defauult dosPtos CUERPO_FUNCIONES BREAK_RETURN 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DEFAULT ::= defauult dosPtos 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DEFAULT ::= defauult dosPtos BREAK_RETURN 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= iff para CONDICION parc llavea llavec 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF ::= iff para CONDICION parc llavea llavec ELSE_IF 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IF ::= iff para CONDICION parc llavea llavec ELSE_IF ELSE 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF ::= iff para CONDICION parc llavea llavec ELSE 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF ::= iff para CONDICION parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF ::= iff para CONDICION parc llavea CUERPO_FUNCIONES llavec ELSE_IF 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF ::= iff para CONDICION parc llavea CUERPO_FUNCIONES llavec ELSE_IF ELSE 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF ::= iff para CONDICION parc llavea CUERPO_FUNCIONES llavec ELSE 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELSE_IF1 ::= elsee iff para CONDICION parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELSE_IF1 ::= elsee iff para CONDICION parc llavea llavec 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELSE_IF ::= ELSE_IF ELSE_IF1 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSE_IF ::= ELSE_IF1 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELSE ::= elsee llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELSE ::= elsee llavea llavec 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= foor para TIPODATOS id asignacion EXPR ptoYcoma CONDICION ptoYcoma INCREMENTO parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FOR ::= foor para TIPODATOS id asignacion EXPR ptoYcoma CONDICION ptoYcoma INCREMENTO parc llavea llavec 
            {
              Object RESULT =null;
		
              RESULT="";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INCREMENTO ::= id asignacion PASO 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INCREMENTO ::= id asignacion EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INCREMENTO ::= id PASO 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INCREMENTO ::= id SIGNOS asignacion EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PASO ::= incremento 
            {
              Object RESULT =null;
		
             RESULT="";
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASO",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PASO ::= decremento 
            {
              Object RESULT =null;
		
             RESULT="";
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASO",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SIGNOS ::= mas 
            {
              Object RESULT =null;
		
             RESULT="";
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SIGNOS ::= menos 
            {
              Object RESULT =null;
		
             RESULT="";
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SIGNOS ::= por 
            {
              Object RESULT =null;
		
             RESULT="";
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SIGNOS ::= div 
            {
              Object RESULT =null;
		
             RESULT="";
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LLAMADA_FUNCIONES ::= id para parc ptoYcoma 
            {
              Object RESULT =null;
		
                         RESULT="";
                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LLAMADA_FUNCIONES ::= id para PARAMETROS_FUNC parc ptoYcoma 
            {
              Object RESULT =null;
		
                         RESULT="";
                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMETROS_FUNC ::= PARAMETROS_FUNC coma id 
            {
              Object RESULT =null;
		
                         RESULT="";
                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNC",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMETROS_FUNC ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNC",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONSTRUCTOR ::= id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONSTRUCTOR ::= id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONSTRUCTOR ::= id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONSTRUCTOR ::= id para parc llavea llavec 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // WHILE ::= whilee para CONDICION parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // WHILE ::= whilee para CONDICION parc llavea llavec 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DO_WHILE ::= doo llavea CUERPO_FUNCIONES llavec whilee para CONDICION parc ptoYcoma 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DO_WHILE ::= doo llavea llavec whilee para CONDICION parc ptoYcoma 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VISIBILIDAD ::= priivate 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VISIBILIDAD ::= puublic 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VISIBILIDAD ::= prootected 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VISIBILIDAD ::= fiinal 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VISIBILIDAD ::= staatic 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIPODATOS ::= iint 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPODATOS ::= bool 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TIPODATOS ::= string 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TIPODATOS ::= chaar 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TIPODATOS ::= doublee 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TIPODATOS ::= object 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPR ::= EXPR mas EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString()+m.toString()+ex.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPR ::= EXPR menos EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString()+m.toString()+ex.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPR ::= EXPR por EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString()+p.toString()+ex.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPR ::= EXPR div EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString()+d.toString()+ex.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPR ::= menos EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString()+ex.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPR ::= num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPR ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPR ::= cadena 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=c.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPR ::= decimal 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=d.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPR ::= truee 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPR ::= falsee 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPR ::= para EXPR parc 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=pa.toString()+e.toString()+pc.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONDICION ::= EXPR mayor EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONDICION ::= EXPR menor EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONDICION ::= EXPR mayorQ EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONDICION ::= EXPR menorQ EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONDICION ::= EXPR iguala EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONDICION ::= EXPR distinto EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONDICION ::= EXPR asignacion EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONDICION ::= EXPR mod EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONDICION ::= not CONDICION 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONDICION ::= CONDICION and CONDICION 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONDICION ::= CONDICION or CONDICION 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONDICION ::= para CONDICION parc 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
