
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\043\003\000\002\043\003" +
    "\000\002\005\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\012\007\000\002\012\006\000\002" +
    "\013\005\000\002\013\004\000\002\014\004\000\002\014" +
    "\003\000\002\042\004\000\002\042\003\000\002\042\006" +
    "\000\002\042\005\000\002\042\004\000\002\042\003\000" +
    "\002\022\010\000\002\022\011\000\002\022\011\000\002" +
    "\022\012\000\002\022\010\000\002\022\011\000\002\022" +
    "\011\000\002\022\012\000\002\023\004\000\002\023\003" +
    "\000\002\041\006\000\002\041\005\000\002\041\004\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\011" +
    "\004\000\002\011\003\000\002\062\006\000\002\062\005" +
    "\000\002\062\004\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\050\012\000\002\050" +
    "\011\000\002\010\003\000\002\010\003\000\002\051\004" +
    "\000\002\051\003\000\002\052\006\000\002\052\007\000" +
    "\002\052\005\000\002\052\006\000\002\057\004\000\002" +
    "\057\004\000\002\057\007\000\002\055\005\000\002\055" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\053\005\000\002\053\006\000\002\053\004\000" +
    "\002\053\005\000\002\026\010\000\002\026\011\000\002" +
    "\026\012\000\002\026\011\000\002\026\011\000\002\026" +
    "\012\000\002\026\013\000\002\026\012\000\002\061\012" +
    "\000\002\061\011\000\002\060\004\000\002\060\003\000" +
    "\002\027\006\000\002\027\005\000\002\044\020\000\002" +
    "\044\017\000\002\046\005\000\002\046\005\000\002\046" +
    "\004\000\002\046\006\000\002\045\003\000\002\045\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\036\006\000\002\036\007\000\002" +
    "\037\005\000\002\037\003\000\002\007\011\000\002\007" +
    "\010\000\002\007\010\000\002\007\007\000\002\024\005" +
    "\000\002\024\006\000\002\024\003\000\002\024\004\000" +
    "\002\034\011\000\002\034\010\000\002\035\013\000\002" +
    "\035\012\000\002\025\004\000\002\017\006\000\002\017" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\004" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\004\000\002\030\005\000\002\030\005\000" +
    "\002\030\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\020\004\016\005\015\025\010\026\012\027" +
    "\011\030\006\031\014\001\002\000\004\005\u013b\001\002" +
    "\000\022\002\000\004\016\005\015\025\010\026\012\027" +
    "\011\030\006\031\014\001\002\000\024\005\uff86\006\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\066" +
    "\uff86\001\002\000\004\002\u0139\001\002\000\024\005\uff89" +
    "\006\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016" +
    "\uff89\066\uff89\001\002\000\024\005\uff87\006\uff87\011\uff87" +
    "\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\066\uff87\001" +
    "\002\000\024\005\uff88\006\uff88\011\uff88\012\uff88\013\uff88" +
    "\014\uff88\015\uff88\016\uff88\066\uff88\001\002\000\022\002" +
    "\ufffe\004\ufffe\005\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\001\002\000\024\005\uff85\006\uff85\011\uff85\012" +
    "\uff85\013\uff85\014\uff85\015\uff85\016\uff85\066\uff85\001\002" +
    "\000\004\066\027\001\002\000\004\066\021\001\002\000" +
    "\022\002\ufffd\004\ufffd\005\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\001\002\000\022\002\ufffc\004\ufffc\005" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\001\002" +
    "\000\006\032\ufff8\033\ufff8\001\002\000\006\032\024\033" +
    "\023\001\002\000\022\002\ufffb\004\ufffb\005\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\001\002\000\006\052" +
    "\025\066\026\001\002\000\006\032\ufff9\033\ufff9\001\002" +
    "\000\006\032\ufffa\033\ufffa\001\002\000\004\035\030\001" +
    "\002\000\036\006\034\011\045\012\040\013\033\014\046" +
    "\015\037\016\050\025\010\026\012\027\011\030\006\031" +
    "\014\036\047\066\044\001\002\000\004\066\032\001\002" +
    "\000\022\002\ufff6\004\ufff6\005\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\001\002\000\004\066\uff82\001\002" +
    "\000\004\066\u012c\001\002\000\036\006\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\036\ufff2\066\ufff2\001\002\000" +
    "\036\006\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\036" +
    "\ufff0\066\ufff0\001\002\000\004\066\uff80\001\002\000\004" +
    "\066\uff83\001\002\000\004\066\u011c\001\002\000\022\006" +
    "\034\011\045\012\040\013\033\014\046\015\037\016\050" +
    "\066\044\001\002\000\036\006\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\036\uffec\066\uffec\001\002\000\004\037" +
    "\054\001\002\000\004\066\uff84\001\002\000\004\066\uff81" +
    "\001\002\000\004\066\ufff4\001\002\000\004\066\uff7f\001" +
    "\002\000\036\006\034\011\045\012\040\013\033\014\046" +
    "\015\037\016\050\025\010\026\012\027\011\030\006\031" +
    "\014\036\053\066\044\001\002\000\036\006\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\036\ufff3\066\ufff3\001\002" +
    "\000\004\066\ufff5\001\002\000\020\011\045\012\040\013" +
    "\033\014\046\015\037\016\050\040\056\001\002\000\004" +
    "\066\u0117\001\002\000\004\035\u0113\001\002\000\006\034" +
    "\060\040\061\001\002\000\016\011\045\012\040\013\033" +
    "\014\046\015\037\016\050\001\002\000\004\035\062\001" +
    "\002\000\046\011\045\012\040\013\033\014\046\015\037" +
    "\016\050\017\077\021\104\022\070\023\100\024\065\025" +
    "\010\026\012\027\011\030\006\031\014\036\102\066\076" +
    "\001\002\000\056\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\036\uffdb\062\uffdb\064\uffdb\066\uffdb\001\002\000\056" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\036\uffdd\062" +
    "\uffdd\064\uffdd\066\uffdd\001\002\000\004\037\360\001\002" +
    "\000\056\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\036" +
    "\uffd9\062\uffd9\064\uffd9\066\uffd9\001\002\000\056\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\036\uffde\062\uffde\064" +
    "\uffde\066\uffde\001\002\000\004\037\351\001\002\000\056" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\036\uffe2\062" +
    "\uffe2\064\uffe2\066\uffe2\001\002\000\004\066\241\001\002" +
    "\000\006\033\346\034\246\001\002\000\016\011\045\012" +
    "\040\013\033\014\046\015\037\016\050\001\002\000\056" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\036\uffdc\062" +
    "\uffdc\064\uffdc\066\uffdc\001\002\000\012\033\uff92\034\uff92" +
    "\037\332\043\243\001\002\000\004\037\276\001\002\000" +
    "\004\035\260\001\002\000\056\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\036\uffda\062\uffda\064\uffda\066\uffda\001" +
    "\002\000\036\006\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\036\uff97\066\uff97\001\002\000\046\011\045\012\040" +
    "\013\033\014\046\015\037\016\050\017\077\021\104\022" +
    "\070\023\100\024\065\025\010\026\012\027\011\030\006" +
    "\031\014\036\257\066\076\001\002\000\004\037\105\001" +
    "\002\000\016\011\045\012\040\013\033\014\046\015\037" +
    "\016\050\001\002\000\004\066\107\001\002\000\004\043" +
    "\110\001\002\000\016\037\111\051\116\065\115\066\117" +
    "\067\112\070\113\001\002\000\016\037\111\051\116\065" +
    "\115\066\117\067\112\070\113\001\002\000\044\033\uff76" +
    "\034\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045" +
    "\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76" +
    "\054\uff76\057\uff76\060\uff76\001\002\000\044\033\uff77\034" +
    "\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77" +
    "\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054" +
    "\uff77\057\uff77\060\uff77\001\002\000\014\033\131\050\122" +
    "\051\123\052\121\053\124\001\002\000\044\033\uff79\034" +
    "\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79" +
    "\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054" +
    "\uff79\057\uff79\060\uff79\001\002\000\016\037\111\051\116" +
    "\065\115\066\117\067\112\070\113\001\002\000\044\033" +
    "\uff78\034\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78" +
    "\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053" +
    "\uff78\054\uff78\057\uff78\060\uff78\001\002\000\044\033\uff7a" +
    "\034\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045" +
    "\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\121\053\124" +
    "\054\uff7a\057\uff7a\060\uff7a\001\002\000\016\037\111\051" +
    "\116\065\115\066\117\067\112\070\113\001\002\000\016" +
    "\037\111\051\116\065\115\066\117\067\112\070\113\001" +
    "\002\000\016\037\111\051\116\065\115\066\117\067\112" +
    "\070\113\001\002\000\016\037\111\051\116\065\115\066" +
    "\117\067\112\070\113\001\002\000\044\033\uff7b\034\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046" +
    "\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b" +
    "\057\uff7b\060\uff7b\001\002\000\044\033\uff7d\034\uff7d\040" +
    "\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d" +
    "\047\uff7d\050\uff7d\051\uff7d\052\121\053\124\054\uff7d\057" +
    "\uff7d\060\uff7d\001\002\000\044\033\uff7e\034\uff7e\040\uff7e" +
    "\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047" +
    "\uff7e\050\uff7e\051\uff7e\052\121\053\124\054\uff7e\057\uff7e" +
    "\060\uff7e\001\002\000\044\033\uff7c\034\uff7c\040\uff7c\041" +
    "\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c" +
    "\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\057\uff7c\060" +
    "\uff7c\001\002\000\020\037\135\051\116\061\132\065\115" +
    "\066\117\067\112\070\113\001\002\000\020\037\135\051" +
    "\116\061\132\065\115\066\117\067\112\070\113\001\002" +
    "\000\032\041\155\042\150\043\147\044\146\045\153\046" +
    "\151\047\145\050\122\051\123\052\121\053\124\054\152" +
    "\001\002\000\010\033\166\057\140\060\141\001\002\000" +
    "\020\037\135\051\116\061\132\065\115\066\117\067\112" +
    "\070\113\001\002\000\034\040\154\041\155\042\150\043" +
    "\147\044\146\045\153\046\151\047\145\050\122\051\123" +
    "\052\121\053\124\054\152\001\002\000\010\040\142\057" +
    "\140\060\141\001\002\000\020\037\135\051\116\061\132" +
    "\065\115\066\117\067\112\070\113\001\002\000\020\037" +
    "\135\051\116\061\132\065\115\066\117\067\112\070\113" +
    "\001\002\000\012\033\uff69\040\uff69\057\uff69\060\uff69\001" +
    "\002\000\012\033\uff6a\040\uff6a\057\uff6a\060\uff6a\001\002" +
    "\000\012\033\uff6b\040\uff6b\057\uff6b\060\uff6b\001\002\000" +
    "\016\037\111\051\116\065\115\066\117\067\112\070\113" +
    "\001\002\000\016\037\111\051\116\065\115\066\117\067" +
    "\112\070\113\001\002\000\016\037\111\051\116\065\115" +
    "\066\117\067\112\070\113\001\002\000\016\037\111\051" +
    "\116\065\115\066\117\067\112\070\113\001\002\000\016" +
    "\037\111\051\116\065\115\066\117\067\112\070\113\001" +
    "\002\000\016\037\111\051\116\065\115\066\117\067\112" +
    "\070\113\001\002\000\016\037\111\051\116\065\115\066" +
    "\117\067\112\070\113\001\002\000\044\033\uff75\034\uff75" +
    "\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046" +
    "\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75" +
    "\057\uff75\060\uff75\001\002\000\016\037\111\051\116\065" +
    "\115\066\117\067\112\070\113\001\002\000\022\033\uff74" +
    "\040\uff74\050\122\051\123\052\121\053\124\057\uff74\060" +
    "\uff74\001\002\000\022\033\uff71\040\uff71\050\122\051\123" +
    "\052\121\053\124\057\uff71\060\uff71\001\002\000\022\033" +
    "\uff6d\040\uff6d\050\122\051\123\052\121\053\124\057\uff6d" +
    "\060\uff6d\001\002\000\022\033\uff6f\040\uff6f\050\122\051" +
    "\123\052\121\053\124\057\uff6f\060\uff6f\001\002\000\022" +
    "\033\uff73\040\uff73\050\122\051\123\052\121\053\124\057" +
    "\uff73\060\uff73\001\002\000\022\033\uff6e\040\uff6e\050\122" +
    "\051\123\052\121\053\124\057\uff6e\060\uff6e\001\002\000" +
    "\022\033\uff72\040\uff72\050\122\051\123\052\121\053\124" +
    "\057\uff72\060\uff72\001\002\000\022\033\uff70\040\uff70\050" +
    "\122\051\123\052\121\053\124\057\uff70\060\uff70\001\002" +
    "\000\004\066\170\001\002\000\004\040\206\001\002\000" +
    "\020\043\173\050\200\051\172\052\177\053\171\055\175" +
    "\056\176\001\002\000\004\043\uff9d\001\002\000\004\043" +
    "\uff9f\001\002\000\022\037\111\051\116\055\175\056\176" +
    "\065\115\066\117\067\112\070\113\001\002\000\004\043" +
    "\202\001\002\000\004\040\uffa2\001\002\000\004\040\uffa1" +
    "\001\002\000\004\043\uff9e\001\002\000\004\043\uffa0\001" +
    "\002\000\004\040\uffa4\001\002\000\016\037\111\051\116" +
    "\065\115\066\117\067\112\070\113\001\002\000\014\040" +
    "\uffa3\050\122\051\123\052\121\053\124\001\002\000\014" +
    "\040\uffa5\050\122\051\123\052\121\053\124\001\002\000" +
    "\004\040\uffa6\001\002\000\004\035\207\001\002\000\052" +
    "\007\226\010\221\011\045\012\040\013\033\014\046\015" +
    "\037\016\050\017\077\021\104\022\070\023\100\024\065" +
    "\025\010\026\012\027\011\030\006\031\014\036\224\066" +
    "\076\001\002\000\052\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\036\uffd0\066\uffd0\001\002\000\052\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\036\uffcd\066\uffcd\001\002" +
    "\000\052\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\036" +
    "\uffd2\066\uffd2\001\002\000\052\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\036\uffce\066\uffce\001\002\000\052\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\036\uffd3\066\uffd3" +
    "\001\002\000\004\066\241\001\002\000\006\033\251\034" +
    "\246\001\002\000\016\011\045\012\040\013\033\014\046" +
    "\015\037\016\050\001\002\000\052\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\036\uffd1\066\uffd1\001\002\000\006" +
    "\033\232\066\233\001\002\000\052\007\226\010\221\011" +
    "\045\012\040\013\033\014\046\015\037\016\050\017\077" +
    "\021\104\022\070\023\100\024\065\025\010\026\012\027" +
    "\011\030\006\031\014\036\231\066\076\001\002\000\052" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\036\uffd7\066" +
    "\uffd7\001\002\000\056\007\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\036\uffa7\062\uffa7\064\uffa7\066\uffa7\001\002\000" +
    "\052\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\036\uffcf" +
    "\066\uffcf\001\002\000\004\033\227\001\002\000\056\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\036\uffc2\062\uffc2" +
    "\064\uffc2\066\uffc2\001\002\000\052\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\036\uffd8\066\uffd8\001\002\000\056" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\036\uffa8\062" +
    "\uffa8\064\uffa8\066\uffa8\001\002\000\056\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\036\uffc1\062\uffc1\064\uffc1\066" +
    "\uffc1\001\002\000\004\043\234\001\002\000\016\037\111" +
    "\051\116\065\115\066\117\067\112\070\113\001\002\000" +
    "\014\033\236\050\122\051\123\052\121\053\124\001\002" +
    "\000\056\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\036" +
    "\uffc0\062\uffc0\064\uffc0\066\uffc0\001\002\000\004\066\241" +
    "\001\002\000\006\033\245\034\246\001\002\000\010\033" +
    "\uff92\034\uff92\043\243\001\002\000\006\033\uff91\034\uff91" +
    "\001\002\000\016\037\111\051\116\065\115\066\117\067" +
    "\112\070\113\001\002\000\016\033\uff8c\034\uff8c\050\122" +
    "\051\123\052\121\053\124\001\002\000\052\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\036\uffd6\066\uffd6\001\002" +
    "\000\004\066\247\001\002\000\010\033\uff94\034\uff94\043" +
    "\243\001\002\000\006\033\uff93\034\uff93\001\002\000\052" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\036\uffd4\066" +
    "\uffd4\001\002\000\006\033\253\034\246\001\002\000\052" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\036\uffd5\066" +
    "\uffd5\001\002\000\012\033\uff6c\040\uff6c\057\uff6c\060\uff6c" +
    "\001\002\000\014\040\154\050\122\051\123\052\121\053" +
    "\124\001\002\000\056\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\036\uffe3\062\uffe3\064\uffe3\066\uffe3\001\002\000" +
    "\036\006\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98" +
    "\016\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\036" +
    "\uff98\066\uff98\001\002\000\046\011\045\012\040\013\033" +
    "\014\046\015\037\016\050\017\077\021\104\022\070\023" +
    "\100\024\065\025\010\026\012\027\011\030\006\031\014" +
    "\036\261\066\076\001\002\000\004\022\271\001\002\000" +
    "\046\011\045\012\040\013\033\014\046\015\037\016\050" +
    "\017\077\021\104\022\070\023\100\024\065\025\010\026" +
    "\012\027\011\030\006\031\014\036\263\066\076\001\002" +
    "\000\004\022\264\001\002\000\004\037\265\001\002\000" +
    "\020\037\135\051\116\061\132\065\115\066\117\067\112" +
    "\070\113\001\002\000\010\040\267\057\140\060\141\001" +
    "\002\000\004\033\270\001\002\000\056\007\uff8e\010\uff8e" +
    "\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017" +
    "\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e" +
    "\027\uff8e\030\uff8e\031\uff8e\036\uff8e\062\uff8e\064\uff8e\066" +
    "\uff8e\001\002\000\004\037\272\001\002\000\020\037\135" +
    "\051\116\061\132\065\115\066\117\067\112\070\113\001" +
    "\002\000\010\040\274\057\140\060\141\001\002\000\004" +
    "\033\275\001\002\000\056\007\uff8d\010\uff8d\011\uff8d\012" +
    "\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\021\uff8d" +
    "\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030" +
    "\uff8d\031\uff8d\036\uff8d\062\uff8d\064\uff8d\066\uff8d\001\002" +
    "\000\020\037\135\051\116\061\132\065\115\066\117\067" +
    "\112\070\113\001\002\000\010\040\300\057\140\060\141" +
    "\001\002\000\004\035\301\001\002\000\046\011\045\012" +
    "\040\013\033\014\046\015\037\016\050\017\077\021\104" +
    "\022\070\023\100\024\065\025\010\026\012\027\011\030" +
    "\006\031\014\036\302\066\076\001\002\000\060\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\310\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\036\uffb6\062" +
    "\uffb6\064\uffb6\066\uffb6\001\002\000\046\011\045\012\040" +
    "\013\033\014\046\015\037\016\050\017\077\021\104\022" +
    "\070\023\100\024\065\025\010\026\012\027\011\030\006" +
    "\031\014\036\304\066\076\001\002\000\060\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\310\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\036\uffb2\062\uffb2" +
    "\064\uffb2\066\uffb2\001\002\000\060\007\uffab\010\uffab\011" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\036\uffab\062\uffab\064\uffab" +
    "\066\uffab\001\002\000\056\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\036\uffaf\062\uffaf\064\uffaf\066\uffaf\001\002" +
    "\000\060\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\310\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\036\uffb1\062\uffb1\064\uffb1\066\uffb1\001\002\000\006" +
    "\017\311\035\312\001\002\000\004\037\316\001\002\000" +
    "\046\011\045\012\040\013\033\014\046\015\037\016\050" +
    "\017\077\021\104\022\070\023\100\024\065\025\010\026" +
    "\012\027\011\030\006\031\014\036\313\066\076\001\002" +
    "\000\056\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\036" +
    "\uffa9\062\uffa9\064\uffa9\066\uffa9\001\002\000\046\011\045" +
    "\012\040\013\033\014\046\015\037\016\050\017\077\021" +
    "\104\022\070\023\100\024\065\025\010\026\012\027\011" +
    "\030\006\031\014\036\315\066\076\001\002\000\056\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\036\uffaa\062\uffaa" +
    "\064\uffaa\066\uffaa\001\002\000\020\037\135\051\116\061" +
    "\132\065\115\066\117\067\112\070\113\001\002\000\010" +
    "\040\320\057\140\060\141\001\002\000\004\035\321\001" +
    "\002\000\046\011\045\012\040\013\033\014\046\015\037" +
    "\016\050\017\077\021\104\022\070\023\100\024\065\025" +
    "\010\026\012\027\011\030\006\031\014\036\322\066\076" +
    "\001\002\000\060\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\036\uffad\062\uffad\064\uffad\066\uffad\001\002" +
    "\000\046\011\045\012\040\013\033\014\046\015\037\016" +
    "\050\017\077\021\104\022\070\023\100\024\065\025\010" +
    "\026\012\027\011\030\006\031\014\036\324\066\076\001" +
    "\002\000\060\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\036\uffae\062\uffae\064\uffae\066\uffae\001\002\000" +
    "\060\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\036\uffac\062\uffac\064\uffac\066\uffac\001\002\000\056\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\036\uffb0\062\uffb0" +
    "\064\uffb0\066\uffb0\001\002\000\056\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\036\uffb3\062\uffb3\064\uffb3\066\uffb3" +
    "\001\002\000\060\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\310\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\036\uffb5\062\uffb5\064\uffb5\066\uffb5\001\002" +
    "\000\056\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\036" +
    "\uffb4\062\uffb4\064\uffb4\066\uffb4\001\002\000\006\040\334" +
    "\066\335\001\002\000\006\034\337\040\340\001\002\000" +
    "\004\033\336\001\002\000\006\034\uff99\040\uff99\001\002" +
    "\000\056\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\036" +
    "\uff9c\062\uff9c\064\uff9c\066\uff9c\001\002\000\004\066\342" +
    "\001\002\000\004\033\341\001\002\000\056\007\uff9b\010" +
    "\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b" +
    "\017\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\036\uff9b\062\uff9b\064\uff9b" +
    "\066\uff9b\001\002\000\006\034\uff9a\040\uff9a\001\002\000" +
    "\004\066\241\001\002\000\006\033\345\034\246\001\002" +
    "\000\056\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\036" +
    "\uffe1\062\uffe1\064\uffe1\066\uffe1\001\002\000\056\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\036\uffdf\062\uffdf\064" +
    "\uffdf\066\uffdf\001\002\000\006\033\350\034\246\001\002" +
    "\000\056\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\036" +
    "\uffe0\062\uffe0\064\uffe0\066\uffe0\001\002\000\020\037\135" +
    "\051\116\061\132\065\115\066\117\067\112\070\113\001" +
    "\002\000\010\040\353\057\140\060\141\001\002\000\004" +
    "\035\354\001\002\000\052\007\226\010\221\011\045\012" +
    "\040\013\033\014\046\015\037\016\050\017\077\021\104" +
    "\022\070\023\100\024\065\025\010\026\012\027\011\030" +
    "\006\031\014\036\356\066\076\001\002\000\052\007\226" +
    "\010\221\011\045\012\040\013\033\014\046\015\037\016" +
    "\050\017\077\021\104\022\070\023\100\024\065\025\010" +
    "\026\012\027\011\030\006\031\014\036\357\066\076\001" +
    "\002\000\056\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f" +
    "\014\uff8f\015\uff8f\016\uff8f\017\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f" +
    "\036\uff8f\062\uff8f\064\uff8f\066\uff8f\001\002\000\056\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90\015\uff90" +
    "\016\uff90\017\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025" +
    "\uff90\026\uff90\027\uff90\030\uff90\031\uff90\036\uff90\062\uff90" +
    "\064\uff90\066\uff90\001\002\000\020\037\135\051\116\061" +
    "\132\065\363\066\361\067\362\070\113\001\002\000\034" +
    "\040\uffbd\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054\uff78" +
    "\001\002\000\034\040\uffbb\041\uff76\042\uff76\043\uff76\044" +
    "\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76" +
    "\053\uff76\054\uff76\001\002\000\034\040\uffbc\041\uff79\042" +
    "\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79" +
    "\051\uff79\052\uff79\053\uff79\054\uff79\001\002\000\004\040" +
    "\uffc9\001\002\000\004\040\367\001\002\000\010\040\uffca" +
    "\057\140\060\141\001\002\000\004\035\370\001\002\000" +
    "\004\062\373\001\002\000\010\036\uffc7\062\uffc7\064\uffc7" +
    "\001\002\000\010\036\u0109\062\373\064\u010b\001\002\000" +
    "\006\070\374\071\376\001\002\000\004\063\uffbe\001\002" +
    "\000\004\063\u0104\001\002\000\010\065\u0101\066\u0102\067" +
    "\u0100\001\002\000\004\071\u0103\001\002\000\004\071\uffbb" +
    "\001\002\000\004\071\uffbc\001\002\000\004\071\uffbd\001" +
    "\002\000\004\063\uffbf\001\002\000\056\007\226\010\221" +
    "\011\045\012\040\013\033\014\046\015\037\016\050\017" +
    "\077\021\104\022\070\023\100\024\065\025\010\026\012" +
    "\027\011\030\006\031\014\036\uffc4\062\uffc4\064\uffc4\066" +
    "\076\001\002\000\010\036\uffc3\062\uffc3\064\uffc3\001\002" +
    "\000\056\007\226\010\221\011\045\012\040\013\033\014" +
    "\046\015\037\016\050\017\077\021\104\022\070\023\100" +
    "\024\065\025\010\026\012\027\011\030\006\031\014\036" +
    "\uffc6\062\uffc6\064\uffc6\066\076\001\002\000\010\036\uffc5" +
    "\062\uffc5\064\uffc5\001\002\000\004\036\u0110\001\002\000" +
    "\056\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\036\uffcb" +
    "\062\uffcb\064\uffcb\066\uffcb\001\002\000\010\036\uffc8\062" +
    "\uffc8\064\uffc8\001\002\000\004\063\u010c\001\002\000\052" +
    "\007\226\010\221\011\045\012\040\013\033\014\046\015" +
    "\037\016\050\017\077\021\104\022\070\023\100\024\065" +
    "\025\010\026\012\027\011\030\006\031\014\036\uffb8\066" +
    "\076\001\002\000\004\036\uffb7\001\002\000\052\007\226" +
    "\010\221\011\045\012\040\013\033\014\046\015\037\016" +
    "\050\017\077\021\104\022\070\023\100\024\065\025\010" +
    "\026\012\027\011\030\006\031\014\036\uffba\066\076\001" +
    "\002\000\004\036\uffb9\001\002\000\056\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\036\uffcc\062\uffcc\064\uffcc\066" +
    "\uffcc\001\002\000\004\066\u0112\001\002\000\006\034\uff8b" +
    "\040\uff8b\001\002\000\046\011\045\012\040\013\033\014" +
    "\046\015\037\016\050\017\077\021\104\022\070\023\100" +
    "\024\065\025\010\026\012\027\011\030\006\031\014\036" +
    "\u0114\066\076\001\002\000\036\006\uff95\011\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\016\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\036\uff95\066\uff95\001\002\000\046" +
    "\011\045\012\040\013\033\014\046\015\037\016\050\017" +
    "\077\021\104\022\070\023\100\024\065\025\010\026\012" +
    "\027\011\030\006\031\014\036\u0116\066\076\001\002\000" +
    "\036\006\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96" +
    "\016\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\036" +
    "\uff96\066\uff96\001\002\000\006\034\uff8a\040\uff8a\001\002" +
    "\000\004\066\u011c\001\002\000\036\006\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\036\ufff1\066\ufff1\001\002\000" +
    "\036\006\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\036" +
    "\uffed\066\uffed\001\002\000\006\033\u0129\034\246\001\002" +
    "\000\012\033\uff92\034\uff92\037\u011d\043\243\001\002\000" +
    "\020\011\045\012\040\013\033\014\046\015\037\016\050" +
    "\040\u011e\001\002\000\004\035\u0125\001\002\000\006\034" +
    "\060\040\u0120\001\002\000\004\035\u0121\001\002\000\046" +
    "\011\045\012\040\013\033\014\046\015\037\016\050\017" +
    "\077\021\104\022\070\023\100\024\065\025\010\026\012" +
    "\027\011\030\006\031\014\036\u0122\066\076\001\002\000" +
    "\036\006\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\036" +
    "\uffe5\066\uffe5\001\002\000\046\011\045\012\040\013\033" +
    "\014\046\015\037\016\050\017\077\021\104\022\070\023" +
    "\100\024\065\025\010\026\012\027\011\030\006\031\014" +
    "\036\u0124\066\076\001\002\000\036\006\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\036\uffe4\066\uffe4\001\002\000" +
    "\046\011\045\012\040\013\033\014\046\015\037\016\050" +
    "\017\077\021\104\022\070\023\100\024\065\025\010\026" +
    "\012\027\011\030\006\031\014\036\u0126\066\076\001\002" +
    "\000\036\006\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\036\uffe7\066\uffe7\001\002\000\046\011\045\012\040\013" +
    "\033\014\046\015\037\016\050\017\077\021\104\022\070" +
    "\023\100\024\065\025\010\026\012\027\011\030\006\031" +
    "\014\036\u0128\066\076\001\002\000\036\006\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\036\uffe6\066\uffe6\001\002" +
    "\000\036\006\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\036\uffef\066\uffef\001\002\000\006\033\u012b\034\246\001" +
    "\002\000\036\006\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\036\uffee\066\uffee\001\002\000\004\037\u012d\001\002" +
    "\000\020\011\045\012\040\013\033\014\046\015\037\016" +
    "\050\040\u012e\001\002\000\004\035\u0135\001\002\000\006" +
    "\034\060\040\u0130\001\002\000\004\035\u0131\001\002\000" +
    "\046\011\045\012\040\013\033\014\046\015\037\016\050" +
    "\017\077\021\104\022\070\023\100\024\065\025\010\026" +
    "\012\027\011\030\006\031\014\036\u0132\066\076\001\002" +
    "\000\036\006\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\036\uffe9\066\uffe9\001\002\000\046\011\045\012\040\013" +
    "\033\014\046\015\037\016\050\017\077\021\104\022\070" +
    "\023\100\024\065\025\010\026\012\027\011\030\006\031" +
    "\014\036\u0134\066\076\001\002\000\036\006\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\036\uffe8\066\uffe8\001\002" +
    "\000\046\011\045\012\040\013\033\014\046\015\037\016" +
    "\050\017\077\021\104\022\070\023\100\024\065\025\010" +
    "\026\012\027\011\030\006\031\014\036\u0136\066\076\001" +
    "\002\000\036\006\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\036\uffeb\066\uffeb\001\002\000\046\011\045\012\040" +
    "\013\033\014\046\015\037\016\050\017\077\021\104\022" +
    "\070\023\100\024\065\025\010\026\012\027\011\030\006" +
    "\031\014\036\u0138\066\076\001\002\000\036\006\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\036\uffea\066\uffea\001" +
    "\002\000\004\002\001\001\002\000\022\002\uffff\004\uffff" +
    "\005\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\001" +
    "\002\000\004\066\u013c\001\002\000\004\035\030\001\002" +
    "\000\004\066\u013e\001\002\000\022\002\ufff7\004\ufff7\005" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\016\002\006\004\004\005\016\012\017\015" +
    "\003\043\012\001\001\000\002\001\001\000\012\005\016" +
    "\012\017\015\003\043\u0139\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\030\001\001\000\016\007\042\014\050\015" +
    "\041\020\040\022\035\042\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0129\001\001\000\010\007\u0119\020" +
    "\u0117\022\u0118\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\042\015\041\020\040\022\035" +
    "\042\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\056\020\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u0110\001\001\000" +
    "\002\001\001\000\030\015\073\020\071\023\102\024\072" +
    "\026\066\034\063\035\074\036\062\041\070\044\100\050" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\346\001\001\000\002" +
    "\001\001\000\004\020\342\001\001\000\002\001\001\000" +
    "\004\025\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\015\073\020" +
    "\071\024\072\026\066\034\063\035\074\036\062\041\255" +
    "\044\100\050\065\001\001\000\002\001\001\000\004\020" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\113\001\001\000\004\031\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\127\001\001\000\004\031\126\001\001" +
    "\000\004\031\125\001\001\000\004\031\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\133\031\132\001\001\000\006\030" +
    "\253\031\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\136\031\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\143\031\132\001\001\000\006" +
    "\030\142\031\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\164\001\001\000\004" +
    "\031\163\001\001\000\004\031\162\001\001\000\004\031" +
    "\161\001\001\000\004\031\160\001\001\000\004\031\157" +
    "\001\001\000\004\031\156\001\001\000\002\001\001\000" +
    "\004\031\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\166\001\001\000\002\001\001\000\006\045\200\047" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\203\045\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\011\221\015\216\020\214\024\215\026\213\034" +
    "\211\035\217\036\207\044\224\050\212\057\210\062\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\251" +
    "\001\001\000\002\001\001\000\004\020\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\015\216\020\214" +
    "\024\215\026\213\034\211\035\217\036\207\044\224\050" +
    "\212\057\210\062\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\237\001\001\000\002" +
    "\001\001\000\004\025\241\001\001\000\002\001\001\000" +
    "\004\031\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\015\073\020\071\023\261\024\072" +
    "\026\066\034\063\035\074\036\062\041\070\044\100\050" +
    "\065\001\001\000\002\001\001\000\026\015\073\020\071" +
    "\024\072\026\066\034\063\035\074\036\062\041\255\044" +
    "\100\050\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\265\031\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\272\031\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\276\031\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\015\073\020" +
    "\071\023\302\024\072\026\066\034\063\035\074\036\062" +
    "\041\070\044\100\050\065\001\001\000\010\027\326\060" +
    "\327\061\304\001\001\000\026\015\073\020\071\024\072" +
    "\026\066\034\063\035\074\036\062\041\255\044\100\050" +
    "\065\001\001\000\010\027\305\060\306\061\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\325\061" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\015\073\020\071\023\313\024\072\026\066\034\063\035" +
    "\074\036\062\041\070\044\100\050\065\001\001\000\002" +
    "\001\001\000\026\015\073\020\071\024\072\026\066\034" +
    "\063\035\074\036\062\041\255\044\100\050\065\001\001" +
    "\000\002\001\001\000\006\030\316\031\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\015\073\020\071" +
    "\023\322\024\072\026\066\034\063\035\074\036\062\041" +
    "\070\044\100\050\065\001\001\000\002\001\001\000\026" +
    "\015\073\020\071\024\072\026\066\034\063\035\074\036" +
    "\062\041\255\044\100\050\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\330\061\324\001\001\000\002\001\001\000\004" +
    "\037\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\351\031\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\011\354\015\216\020\214\024\215\026\213\034" +
    "\211\035\217\036\207\044\224\050\212\057\210\062\222" +
    "\001\001\000\030\015\216\020\214\024\215\026\213\034" +
    "\211\035\217\036\207\044\224\050\212\057\210\062\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\364\030\365\031\132\054\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\371\052\370\001\001\000\002\001\001\000\006\052" +
    "\u0109\053\u0107\001\001\000\004\055\374\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\376\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\015\073\020\071\023" +
    "\u0105\024\072\026\066\034\063\035\074\036\062\041\070" +
    "\044\100\050\065\057\u0104\001\001\000\002\001\001\000" +
    "\030\015\073\020\071\024\072\026\066\034\063\035\074" +
    "\036\062\041\255\044\100\050\065\057\u0106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\015\073\020\071\023" +
    "\u010d\024\072\026\066\034\063\035\074\036\062\041\070" +
    "\044\100\050\065\057\u010c\001\001\000\002\001\001\000" +
    "\030\015\073\020\071\024\072\026\066\034\063\035\074" +
    "\036\062\041\255\044\100\050\065\057\u010e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\015\073\020\071\023\u0114\024\072\026" +
    "\066\034\063\035\074\036\062\041\070\044\100\050\065" +
    "\001\001\000\002\001\001\000\026\015\073\020\071\024" +
    "\072\026\066\034\063\035\074\036\062\041\255\044\100" +
    "\050\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u011a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\241\001\001\000\006\017" +
    "\u011e\020\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\015\073\020\071\023\u0122\024" +
    "\072\026\066\034\063\035\074\036\062\041\070\044\100" +
    "\050\065\001\001\000\002\001\001\000\026\015\073\020" +
    "\071\024\072\026\066\034\063\035\074\036\062\041\255" +
    "\044\100\050\065\001\001\000\002\001\001\000\030\015" +
    "\073\020\071\023\u0126\024\072\026\066\034\063\035\074" +
    "\036\062\041\070\044\100\050\065\001\001\000\002\001" +
    "\001\000\026\015\073\020\071\024\072\026\066\034\063" +
    "\035\074\036\062\041\255\044\100\050\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\u012e\020\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\015\073\020\071\023\u0132\024\072\026\066\034" +
    "\063\035\074\036\062\041\070\044\100\050\065\001\001" +
    "\000\002\001\001\000\026\015\073\020\071\024\072\026" +
    "\066\034\063\035\074\036\062\041\255\044\100\050\065" +
    "\001\001\000\002\001\001\000\030\015\073\020\071\023" +
    "\u0136\024\072\026\066\034\063\035\074\036\062\041\070" +
    "\044\100\050\065\001\001\000\002\001\001\000\026\015" +
    "\073\020\071\024\072\026\066\034\063\035\074\036\062" +
    "\041\255\044\100\050\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u013c\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PRINCIPALES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRINCIPALES ::= PRINCIPALES PRINCIPALES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRINCIPALES ::= PRINCIPALES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PRINCIPALES1 ::= IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PRINCIPALES1 ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINCIPALES1",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= iimport IMPORTS1 ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTS1 ::= IMPORTS1 pto id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTS1 ::= IMPORTS1 pto por 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTS1 ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS ::= VISIBILIDAD claass id CUERPO_CLASE id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASS ::= claass id CUERPO_CLASE id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_CLASE ::= llavea DECLARACIONES_CLASE llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_CLASE ::= llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE DECLARACIONES_CLASE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES_CLASE ::= DECLARACIONES_CLASE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES_CLASE1 ::= VISIBILIDAD MET_FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES_CLASE1 ::= MET_FUNC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES_CLASE1 ::= VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES_CLASE1 ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES_CLASE1 ::= VISIBILIDAD CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACIONES_CLASE1 ::= CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_CLASE1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MET_FUNC ::= voiid id para parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MET_FUNC ::= voiid id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MET_FUNC ::= voiid id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MET_FUNC ::= voiid id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MET_FUNC ::= TIPODATOS id para parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MET_FUNC ::= TIPODATOS id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MET_FUNC ::= TIPODATOS id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MET_FUNC ::= TIPODATOS id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES CUERPO_FUNCIONES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_FUNCIONES ::= CUERPO_FUNCIONES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_FUNCIONES1 ::= VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_FUNCIONES1 ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_FUNCIONES1 ::= VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_FUNCIONES1 ::= IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_FUNCIONES1 ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_FUNCIONES1 ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO_FUNCIONES1 ::= LLAMADA_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO_FUNCIONES1 ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO_FUNCIONES1 ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONES1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPO_FUNCIONESR ::= CUERPO_FUNCIONESR CUERPO_FUNCIONESR1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUERPO_FUNCIONESR ::= CUERPO_FUNCIONESR1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CUERPO_FUNCIONESR1 ::= VISIBILIDAD TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CUERPO_FUNCIONESR1 ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUERPO_FUNCIONESR1 ::= VARIABLES ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUERPO_FUNCIONESR1 ::= IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUERPO_FUNCIONESR1 ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPO_FUNCIONESR1 ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUERPO_FUNCIONESR1 ::= LLAMADA_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUERPO_FUNCIONESR1 ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPO_FUNCIONESR1 ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPO_FUNCIONESR1 ::= BREAK_RETURN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCIONESR1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SWITCH ::= swiitch para COND_SW parc llavea CASE DEFAULT llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SWITCH ::= swiitch para COND_SW parc llavea CASE llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND_SW ::= CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_SW",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND_SW ::= VALORES1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_SW",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASE ::= CASE CASE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASE ::= CASE1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASE1 ::= casee VALORES dosPtos CUERPO_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASE1 ::= casee VALORES dosPtos CUERPO_FUNCIONES BREAK_RETURN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASE1 ::= casee VALORES dosPtos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASE1 ::= casee VALORES dosPtos BREAK_RETURN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE1",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BREAK_RETURN ::= breeak ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK_RETURN",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BREAK_RETURN ::= retuurn ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK_RETURN",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BREAK_RETURN ::= retuurn id asignacion EXPR ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK_RETURN",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALORES ::= comilla VALORES1 comilla 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORES ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES1 ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES1",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES1 ::= num 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES1",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALORES1 ::= decimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES1",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DEFAULT ::= defauult dosPtos CUERPO_FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DEFAULT ::= defauult dosPtos CUERPO_FUNCIONES BREAK_RETURN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DEFAULT ::= defauult dosPtos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DEFAULT ::= defauult dosPtos BREAK_RETURN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF ::= iff para CONDICION parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IF ::= iff para CONDICION parc llavea llavec ELSE_IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF ::= iff para CONDICION parc llavea llavec ELSE_IF ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF ::= iff para CONDICION parc llavea llavec ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF ::= iff para CONDICION parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF ::= iff para CONDICION parc llavea CUERPO_FUNCIONES llavec ELSE_IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF ::= iff para CONDICION parc llavea CUERPO_FUNCIONES llavec ELSE_IF ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF ::= iff para CONDICION parc llavea CUERPO_FUNCIONES llavec ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELSE_IF1 ::= elsee iff para CONDICION parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF1",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELSE_IF1 ::= elsee iff para CONDICION parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF1",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSE_IF ::= ELSE_IF ELSE_IF1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELSE_IF ::= ELSE_IF1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELSE ::= elsee llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELSE ::= elsee llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FOR ::= foor para TIPODATOS id asignacion EXPR ptoYcoma CONDICION ptoYcoma INCREMENTO parc llavea CUERPO_FUNCIONESR llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FOR ::= foor para TIPODATOS id asignacion EXPR ptoYcoma CONDICION ptoYcoma INCREMENTO parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INCREMENTO ::= id asignacion PASO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INCREMENTO ::= id asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INCREMENTO ::= id PASO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INCREMENTO ::= id SIGNOS asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PASO ::= incremento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASO",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PASO ::= decremento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PASO",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SIGNOS ::= mas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SIGNOS ::= menos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SIGNOS ::= por 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SIGNOS ::= div 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LLAMADA_FUNCIONES ::= id para parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCIONES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LLAMADA_FUNCIONES ::= id para PARAMETROS_FUNC parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCIONES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMETROS_FUNC ::= PARAMETROS_FUNC coma id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNC",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMETROS_FUNC ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNC",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONSTRUCTOR ::= id para PARAMETROS parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONSTRUCTOR ::= id para PARAMETROS parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONSTRUCTOR ::= id para parc llavea CUERPO_FUNCIONES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONSTRUCTOR ::= id para parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VARIABLES ::= VARIABLES coma id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VARIABLES ::= VARIABLES coma id ASIGNACION_VAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VARIABLES ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VARIABLES ::= id ASIGNACION_VAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // WHILE ::= whilee para CONDICION parc llavea CUERPO_FUNCIONESR llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // WHILE ::= whilee para CONDICION parc llavea llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DO_WHILE ::= doo llavea CUERPO_FUNCIONES llavec whilee para CONDICION parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DO_WHILE ::= doo llavea llavec whilee para CONDICION parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ASIGNACION_VAR ::= asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAMETROS ::= PARAMETROS coma TIPODATOS id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAMETROS ::= TIPODATOS id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VISIBILIDAD ::= priivate 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VISIBILIDAD ::= puublic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VISIBILIDAD ::= prootected 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VISIBILIDAD ::= fiinal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VISIBILIDAD ::= staatic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TIPODATOS ::= iint 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TIPODATOS ::= bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TIPODATOS ::= string 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TIPODATOS ::= chaar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TIPODATOS ::= doublee 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TIPODATOS ::= object 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPR ::= EXPR mas EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPR ::= EXPR menos EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPR ::= EXPR por EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPR ::= EXPR div EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPR ::= menos EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPR ::= num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPR ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPR ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPR ::= decimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPR ::= para EXPR parc 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONDICION ::= EXPR mayor EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONDICION ::= EXPR menor EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONDICION ::= EXPR mayorQ EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONDICION ::= EXPR menorQ EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONDICION ::= EXPR iguala EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONDICION ::= EXPR distinto EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONDICION ::= EXPR asignacion EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONDICION ::= EXPR mod EXPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONDICION ::= not CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONDICION ::= CONDICION and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONDICION ::= CONDICION or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONDICION ::= para CONDICION parc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
