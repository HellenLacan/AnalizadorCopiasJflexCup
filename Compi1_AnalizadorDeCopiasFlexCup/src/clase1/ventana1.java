/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clase1;

import BasesRepetidas.*;
import Analizadores.Analizador_Lexico;
import Analizadores.Sintactico;
import Bases.*;
import com.google.gson.Gson;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author jorge
 */
public class ventana1 extends javax.swing.JFrame {

    /**
     * Creates new form ventana1
     */
    public ventana1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Enviar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Resultado:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(jButton1)
                .addContainerGap(502, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        //*************************ABRIENDO ARCHIVO 1 Y ANALIZANDOLO****************************
        File folder1 = new File("C:\\Users\\Hellen\\Desktop\\Proyecto1");

        File[] listOfFiles1 = folder1.listFiles();

        ArrayList<Archivo> arrayArchivo1 = new ArrayList<Archivo>();
        ArrayList<Clase> arrayClasesArchivo1 = new ArrayList<Clase>();

        for (File file : listOfFiles1) {
            Archivo miArchivo1 = new Archivo();
            if (file.isFile()) {
                String path = file.getAbsolutePath();
                System.out.println("*********" + path + "**********");
                System.out.println(file.getName());
                try {
                    String contenido = "";
                    contenido = new String(Files.readAllBytes(Paths.get(path)));
                    miArchivo1.setContenido(contenido);
                    miArchivo1.setNombre(file.getName());
                    miArchivo1.setPath(path);
                    arrayArchivo1.add(miArchivo1);

                    Sintactico sintactico = new Sintactico(new Analizador_Lexico(new BufferedReader(new StringReader(miArchivo1.getContenido()))));
                    Clase misClasesArchivo1 = (Clase) sintactico.parse().value;
                    //new LexerXML(new BufferedReader( new StringReader(jTextPane1.getText())));
                    //SE INICIA LA COMPILAC ION LEXICO Y SINTACTICO
                    this.jLabel1.setText("Resultado " + sintactico.resultado);
                    arrayClasesArchivo1.add(misClasesArchivo1);
                    System.out.println("Generados automaticamente");

                } catch (Exception ex) {
                    Logger.getLogger(ventana1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        //***************ABRIENDO PROYECTO 2***************
        File folder2 = new File("C:\\Users\\Hellen\\Desktop\\Proyecto2");
        File[] listOfFiles2 = folder1.listFiles();

        ArrayList<Archivo> arrayArchivo2 = new ArrayList<Archivo>();
        ArrayList<Clase> ArrayClasesArchivo2 = new ArrayList<Clase>();

        for (File file : listOfFiles2) {
            Archivo miArchivo2 = new Archivo();
            if (file.isFile()) {
                String path2 = file.getAbsolutePath();
                System.out.println("*********" + path2 + "**********");
                System.out.println(file.getName());
                try {
                    String contenido2 = "";
                    contenido2 = new String(Files.readAllBytes(Paths.get(path2)));
                    miArchivo2.setContenido(contenido2);
                    miArchivo2.setNombre(file.getName());
                    miArchivo2.setPath(path2);
                    arrayArchivo2.add(miArchivo2);

                    Sintactico sintactico = new Sintactico(new Analizador_Lexico(new BufferedReader(new StringReader(miArchivo2.getContenido()))));
                    Clase misClasesArchivo2 = (Clase) sintactico.parse().value;
                    this.jLabel1.setText("Resultado " + sintactico.resultado);
                    ArrayClasesArchivo2.add(misClasesArchivo2);
                    System.out.println("Generados automaticamente");

                } catch (Exception ex) {
                    Logger.getLogger(ventana1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        //*/////////////REALIZANDO COMPARACION************************
        String clase1 = "";
        String clase2 = "";
        String clasesRepetidas = "";
        String Funciones1 = "";
        String Funciones2 = "";
        String FuncionesRepetidas = "";

        ArrayList<claseRepetida> miclaseRep = new ArrayList<claseRepetida>();
        ArrayList<variableRepetida> arrayMiVarRep = new ArrayList<variableRepetida>();
        ArrayList<funcionRepetida> arrayFunctionRep = new ArrayList<funcionRepetida>();

        for (Clase itemClass : arrayClasesArchivo1) {
            for (Clase itemClass2 : ArrayClasesArchivo2) {
                clase1 = clase1 + itemClass.getNombre() + ", ";
                clase2 = clase2 + itemClass2.getNombre() + ", ";
                //Comparando clases
                if (itemClass.getNombre().equals(itemClass2.getNombre())) {
                    claseRepetida miclase = new claseRepetida();
                    miclase.nombre = itemClass.getNombre();
                    miclaseRep.add(miclase);
                }

                //Funciones Repetidas
                for (Funcion itemFun1 : itemClass.getArrayFunciones()) {
                    for (Funcion itemFun2 : itemClass2.getArrayFunciones()) {
                        if ((itemFun1.getNombre().equals(itemFun2.getNombre())) && itemFun1.getTipo_dato().equals(itemFun2.getTipo_dato())) {

                            //Parametros repetidos
                            int contadorParam = 0;

                            if ((itemFun1.getArrayParametros() == null && itemFun2.getArrayParametros() != null) || (itemFun1.getArrayParametros() != null && itemFun2.getArrayParametros() == null)) {

                            } else if (itemFun1.getArrayParametros() == null && itemFun2.getArrayParametros() == null) {
                                funcionRepetida miFuncion = new funcionRepetida();
                                miFuncion.nombre = itemFun1.getNombre();
                                miFuncion.tipo = itemFun1.getTipo_dato();
                                miFuncion.parametros = 0;
                                arrayFunctionRep.add(miFuncion);
                            } else {
                                for (Parametro itemParam1 : itemFun1.getArrayParametros()) {
                                    for (Parametro itemParam2 : itemFun2.getArrayParametros()) {
                                        if ((itemParam1.getNombre().equals(itemParam2.getNombre())) && itemParam1.getTipo().equals(itemParam2.getTipo())) {
                                            contadorParam += 1;
                                        }
                                    }
                                }
                                //si no trae los dos parametros iguales retorna que no son repetidos
                                if (contadorParam == itemFun1.getArrayParametros().size()) {
                                    funcionRepetida miFuncion = new funcionRepetida();
                                    miFuncion.nombre = itemFun1.getNombre();
                                    miFuncion.tipo = itemFun1.getTipo_dato();
                                    miFuncion.parametros = contadorParam;
                                    arrayFunctionRep.add(miFuncion);
                                }
                            }

                            //Variables repetidas
                            if ((itemFun1.getArrayVariables() != null && itemFun2.getArrayVariables() == null) || (itemFun1.getArrayVariables() == null && itemFun2.getArrayVariables() != null)) {

                            } else if (itemFun1.getArrayVariables() != null && (itemFun2.getArrayVariables() != null)) {
                                for (Variable itemVar1 : itemFun1.getArrayVariables()) {
                                    for (Variable itemVar2 : itemFun2.getArrayVariables()) {
                                        if ((itemVar1.getNombre().equals(itemVar2.getNombre())) && (itemVar1.getTipo().equals(itemVar2.getTipo())) && (itemFun1.getNombre().equals(itemFun2.getNombre()) && (itemClass.getNombre().equals(itemClass2.getNombre())))) {
                                            variableRepetida miVariable = new variableRepetida();
                                            miVariable.nombre = itemVar1.getNombre();
                                            miVariable.tipo = itemVar1.getTipo();
                                            miVariable.funcion = itemFun1.getNombre();
                                            miVariable.clase = itemClass.getNombre();
                                            arrayMiVarRep.add(miVariable);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                //Metodos repetidos
                for (Metodo itemMet1 : itemClass.getArrayMetodos()) {
                    for (Metodo itemMet2 : itemClass2.getArrayMetodos()) {
                        if ((itemMet1.getNombre().equals(itemMet2.getNombre())) && itemMet1.getTipo_dato().equals(itemMet2.getTipo_dato())) {
                            //Parametros repetidos
                            int contadorParam = 0;

                            if ((itemMet1.getArrayParametros() == null && itemMet2.getArrayParametros() != null) || (itemMet1.getArrayParametros() != null && itemMet2.getArrayParametros() == null)) {

                            } else if (itemMet1.getArrayParametros() == null && itemMet2.getArrayParametros() == null) {
                                funcionRepetida miFuncion = new funcionRepetida();
                                miFuncion.nombre = itemMet1.getNombre();
                                miFuncion.tipo = itemMet1.getTipo_dato();
                                miFuncion.parametros = 0;
                                arrayFunctionRep.add(miFuncion);
                            } else {
                                for (Parametro itemParam1 : itemMet1.getArrayParametros()) {
                                    for (Parametro itemParam2 : itemMet2.getArrayParametros()) {
                                        if ((itemParam1.getNombre().equals(itemParam2.getNombre())) && itemParam1.getTipo().equals(itemParam2.getTipo())) {
                                            contadorParam += 1;
                                        }
                                    }
                                }
                                //si no trae los dos parametros iguales retorna que no son repetidos
                                if (contadorParam == itemMet1.getArrayParametros().size()) {
                                    funcionRepetida miFuncion = new funcionRepetida();
                                    miFuncion.nombre = itemMet1.getNombre();
                                    miFuncion.tipo = itemMet1.getTipo_dato();
                                    miFuncion.parametros = contadorParam;
                                    arrayFunctionRep.add(miFuncion);
                                }
                            }

                            //Variables repetidas
                            if ((itemMet1.getArrayVariables() != null && itemMet2.getArrayVariables() == null) || (itemMet1.getArrayVariables() == null && itemMet2.getArrayVariables() != null)) {

                            } else if (itemMet1.getArrayVariables() != null && (itemMet2.getArrayVariables() != null)) {
                                for (Variable itemVar1 : itemMet1.getArrayVariables()) {
                                    for (Variable itemVar2 : itemMet2.getArrayVariables()) {
                                        if ((itemVar1.getNombre().equals(itemVar2.getNombre())) && (itemVar1.getTipo().equals(itemVar2.getTipo())) && (itemMet1.getNombre().equals(itemMet2.getNombre()) && (itemClass.getNombre().equals(itemClass2.getNombre())))) {
                                            variableRepetida miVariable = new variableRepetida();
                                            miVariable.nombre = itemVar1.getNombre();
                                            miVariable.tipo = itemVar1.getTipo();
                                            miVariable.funcion = itemMet1.getNombre();
                                            miVariable.clase = itemClass.getNombre();
                                            arrayMiVarRep.add(miVariable);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        System.out.println("Estas son clases Repetidas: " + clasesRepetidas);
        System.out.println("Estas son funciones repetidas " + FuncionesRepetidas);
        
        Resultante miResultante= new Resultante("50",miclaseRep,arrayFunctionRep,arrayMiVarRep);
        ArrayList<Resultante> arrayJson= new ArrayList<Resultante>();
        arrayJson.add(miResultante);
        
        String json = new Gson().toJson(arrayJson);
        System.out.println(json);
    }//GEN-LAST:event_jButton1ActionPerformed

    public boolean ValidarVariablesRepetidas() {
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventana1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventana1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventana1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventana1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventana1().setVisible(true);
                //createAndShowGUI();

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
